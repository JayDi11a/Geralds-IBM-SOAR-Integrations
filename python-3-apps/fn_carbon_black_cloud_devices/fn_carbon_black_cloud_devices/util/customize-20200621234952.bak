# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_carbon_black_cloud_devices"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_carbon_black_cloud_devices package"""
    reload_params = {"package": u"fn_carbon_black_cloud_devices",
                    "incident_fields": [], 
                    "action_fields": [u"carbon_black_device_actions", u"toggle_setting"], 
                    "function_params": [u"carbon_black_device_query_string", u"device_action_type", u"incident_id", u"toggle"], 
                    "datatables": [], 
                    "message_destinations": [u"carbon_black_cloud"], 
                    "functions": [u"carbon_black_cloud_devices_quarantine"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_carbon_black_cloud_devices_quarantine"], 
                    "actions": [u"Example: Run Carbon Black Device Quarantine"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Action fields:
    #     carbon_black_device_actions
    #     toggle_setting
    #   Function inputs:
    #     carbon_black_device_query_string
    #     device_action_type
    #     incident_id
    #     toggle
    #   Message Destinations:
    #     carbon_black_cloud
    #   Functions:
    #     carbon_black_cloud_devices_quarantine
    #   Workflows:
    #     example_carbon_black_cloud_devices_quarantine
    #   Rules:
    #     Example: Run Carbon Black Device Quarantine


    yield ImportDefinition(u"""
eyJhY3Rpb25fb3JkZXIiOiBbXSwgImFjdGlvbnMiOiBbeyJhdXRvbWF0aW9ucyI6IFtdLCAiY29u
ZGl0aW9ucyI6IFtdLCAiZW5hYmxlZCI6IHRydWUsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IFJ1
biBDYXJib24gQmxhY2sgRGV2aWNlIFF1YXJhbnRpbmUiLCAiaWQiOiAxOTUsICJsb2dpY190eXBl
IjogImFsbCIsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlOiBS
dW4gQ2FyYm9uIEJsYWNrIERldmljZSBRdWFyYW50aW5lIiwgIm9iamVjdF90eXBlIjogImFydGlm
YWN0IiwgInRhZ3MiOiBbXSwgInRpbWVvdXRfc2Vjb25kcyI6IDg2NDAwLCAidHlwZSI6IDEsICJ1
dWlkIjogIjE4OGMzODliLWY4OGEtNDRlZi1iOWY3LThkZDQ3ODcyYjcxYSIsICJ2aWV3X2l0ZW1z
IjogW3siY29udGVudCI6ICI4YTIwMmFkYS1kYjRhLTQ4NTYtOGE1OS04ZDg3ZWUwOWRiZjIiLCAi
ZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiYWN0aW9uaW52b2NhdGlvbiIs
ICJzaG93X2lmIjogbnVsbCwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgInN0ZXBfbGFiZWwi
OiBudWxsfSwgeyJjb250ZW50IjogImI1ZWY2MmZhLWVhYTUtNGVlMS1iZmRlLTAxODMwNTVkYzc5
NyIsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJhY3Rpb25pbnZvY2F0
aW9uIiwgInNob3dfaWYiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAic3RlcF9s
YWJlbCI6IG51bGx9XSwgIndvcmtmbG93cyI6IFsiZXhhbXBsZV9jYXJib25fYmxhY2tfY2xvdWRf
ZGV2aWNlc19xdWFyYW50aW5lIl19XSwgImFwcHMiOiBbXSwgImF1dG9tYXRpY190YXNrcyI6IFtd
LCAiZXhwb3J0X2RhdGUiOiAxNTkyODA1NjI5MTQ1LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjog
MiwgImZpZWxkcyI6IFt7ImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImJsYW5rX29wdGlv
biI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJjaG9z
ZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiZGVwcmVjYXRl
ZCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2NhcmJvbl9ibGFja19kZXZpY2Vf
cXVlcnlfc3RyaW5nIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJpZCI6IDc5NSwgImlu
cHV0X3R5cGUiOiAidGV4dCIsICJpbnRlcm5hbCI6IGZhbHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNl
LCAibmFtZSI6ICJjYXJib25fYmxhY2tfZGV2aWNlX3F1ZXJ5X3N0cmluZyIsICJvcGVyYXRpb25f
cGVybXMiOiB7fSwgIm9wZXJhdGlvbnMiOiBbXSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVmaXgi
OiBudWxsLCAicmVhZF9vbmx5IjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRhZ3MiOiBb
XSwgInRlbXBsYXRlcyI6IFtdLCAidGV4dCI6ICJjYXJib25fYmxhY2tfZGV2aWNlX3F1ZXJ5X3N0
cmluZyIsICJ0b29sdGlwIjogIkFjY2VwdHMgcXVlcnkgc3RyaW5nIHRvIHNlYXJjaCBmb3IgZGV2
aWNlKHMpIiwgInR5cGVfaWQiOiAxMSwgInV1aWQiOiAiOTliNmEyMTEtNzMxYS00OTJmLWIwZjYt
NzlhMjE1NjAyN2I0IiwgInZhbHVlcyI6IFtdfSwgeyJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFs
c2UsICJibGFua19vcHRpb24iOiB0cnVlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJs
ZSI6IHRydWUsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZh
bHNlLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL3RvZ2ds
ZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiaWQiOiA3OTcsICJpbnB1dF90eXBlIjog
InNlbGVjdCIsICJpbnRlcm5hbCI6IGZhbHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6
ICJ0b2dnbGUiLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJvcGVyYXRpb25zIjogW10sICJwbGFj
ZWhvbGRlciI6ICIiLCAicHJlZml4IjogbnVsbCwgInJlYWRfb25seSI6IGZhbHNlLCAicmljaF90
ZXh0IjogZmFsc2UsICJ0YWdzIjogW10sICJ0ZW1wbGF0ZXMiOiBbXSwgInRleHQiOiAidG9nZ2xl
IiwgInRvb2x0aXAiOiAiVHVybnMgdGhlIGRldmljZSBhY3Rpb24gb24gb3Igb2ZmIiwgInR5cGVf
aWQiOiAxMSwgInV1aWQiOiAiZTFlNzIwYzYtYWY5YS00ODE5LTg4ZmUtN2E0N2Q4NDAzMTU3Iiwg
InZhbHVlcyI6IFt7ImRlZmF1bHQiOiB0cnVlLCAiZW5hYmxlZCI6IHRydWUsICJoaWRkZW4iOiBm
YWxzZSwgImxhYmVsIjogIk9OIiwgInByb3BlcnRpZXMiOiBudWxsLCAidXVpZCI6ICJkYjA0NTM1
ZC0xODAyLTRlZjEtYjM3ZC0wOTFiMDg0ZDU0MTMiLCAidmFsdWUiOiAzNzV9LCB7ImRlZmF1bHQi
OiBmYWxzZSwgImVuYWJsZWQiOiB0cnVlLCAiaGlkZGVuIjogZmFsc2UsICJsYWJlbCI6ICJPRkYi
LCAicHJvcGVydGllcyI6IG51bGwsICJ1dWlkIjogIjA1YzJhMjY2LTgxNmUtNDY5Zi04NzZjLTBi
MTg2ZDVmZDBiMyIsICJ2YWx1ZSI6IDM3Nn1dfSwgeyJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFs
c2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgImNoYW5nZWFi
bGUiOiB0cnVlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBm
YWxzZSwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9pbmNp
ZGVudF9pZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAiaWQiOiAxNDUsICJpbnB1dF90
eXBlIjogIm51bWJlciIsICJpbnRlcm5hbCI6IGZhbHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAi
bmFtZSI6ICJpbmNpZGVudF9pZCIsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgIm9wZXJhdGlvbnMi
OiBbXSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVmaXgiOiBudWxsLCAicmVhZF9vbmx5IjogZmFs
c2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInRlbXBsYXRlcyI6IFtdLCAidGV4
dCI6ICJpbmNpZGVudF9pZCIsICJ0b29sdGlwIjogIiIsICJ0eXBlX2lkIjogMTEsICJ1dWlkIjog
ImVhZDIxNGMyLTEzZmUtNDNmNi1hM2M3LTY3NmE4ODMzOGRiYiIsICJ2YWx1ZXMiOiBbXX0sIHsi
YWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogdHJ1ZSwgImNhbGN1
bGF0ZWQiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZh
dWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImV4cG9y
dF9rZXkiOiAiX19mdW5jdGlvbi9kZXZpY2VfYWN0aW9uX3R5cGUiLCAiaGlkZV9ub3RpZmljYXRp
b24iOiBmYWxzZSwgImlkIjogNzk2LCAiaW5wdXRfdHlwZSI6ICJzZWxlY3QiLCAiaW50ZXJuYWwi
OiBmYWxzZSwgImlzX3RyYWNrZWQiOiBmYWxzZSwgIm5hbWUiOiAiZGV2aWNlX2FjdGlvbl90eXBl
IiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAib3BlcmF0aW9ucyI6IFtdLCAicGxhY2Vob2xkZXIi
OiAiIiwgInByZWZpeCI6IG51bGwsICJyZWFkX29ubHkiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZh
bHNlLCAidGFncyI6IFtdLCAidGVtcGxhdGVzIjogW10sICJ0ZXh0IjogImRldmljZV9hY3Rpb25f
dHlwZSIsICJ0b29sdGlwIjogIlNwZWNpZmllcyB0aGUgYWN0aW9uIHRvIGJlIHRha2VuIG9uIGEg
Z2l2ZW4gZGV2aWNlIiwgInR5cGVfaWQiOiAxMSwgInV1aWQiOiAiZWE4NDc5MGYtM2JhZi00MDk1
LThlZDktNjIwMTJlNjA4N2MyIiwgInZhbHVlcyI6IFt7ImRlZmF1bHQiOiBmYWxzZSwgImVuYWJs
ZWQiOiB0cnVlLCAiaGlkZGVuIjogZmFsc2UsICJsYWJlbCI6ICJCQUNLR1JPVU5EX1NDQU4iLCAi
cHJvcGVydGllcyI6IG51bGwsICJ1dWlkIjogIjBmZWE2YmFlLWM1MWMtNDY4Yi05YTlhLTFkZTFm
NDVlZTY3OSIsICJ2YWx1ZSI6IDM2OH0sIHsiZGVmYXVsdCI6IGZhbHNlLCAiZW5hYmxlZCI6IHRy
dWUsICJoaWRkZW4iOiBmYWxzZSwgImxhYmVsIjogIkJZUEFTUyIsICJwcm9wZXJ0aWVzIjogbnVs
bCwgInV1aWQiOiAiZTFlZDc3NjctOTdiNC00OGJiLTg0NjctYjNjZGUxNjNiMTA2IiwgInZhbHVl
IjogMzY5fSwgeyJkZWZhdWx0IjogZmFsc2UsICJlbmFibGVkIjogdHJ1ZSwgImhpZGRlbiI6IGZh
bHNlLCAibGFiZWwiOiAiVU5JTlNUQUxMX1NFTlNPUiIsICJwcm9wZXJ0aWVzIjogbnVsbCwgInV1
aWQiOiAiMjdiOTkxYmYtMmJmNS00ZTlhLTkyYzEtNzU3OTk4NDM0NjNjIiwgInZhbHVlIjogMzcw
fSwgeyJkZWZhdWx0IjogZmFsc2UsICJlbmFibGVkIjogdHJ1ZSwgImhpZGRlbiI6IGZhbHNlLCAi
bGFiZWwiOiAiREVMRVRFX1NFTlNPUiIsICJwcm9wZXJ0aWVzIjogbnVsbCwgInV1aWQiOiAiZTU4
NDJlNTQtOTY4Yi00ZTY2LWIxMzYtM2YxMWIzNTg1ZjhkIiwgInZhbHVlIjogMzcxfSwgeyJkZWZh
dWx0IjogZmFsc2UsICJlbmFibGVkIjogdHJ1ZSwgImhpZGRlbiI6IGZhbHNlLCAibGFiZWwiOiAi
UVVBUkFOVElORSIsICJwcm9wZXJ0aWVzIjogbnVsbCwgInV1aWQiOiAiN2QwZDRlNjYtNDQ4OS00
YWNkLWJhNjQtMzdlNDJkODcwNWQ4IiwgInZhbHVlIjogMzcyfSwgeyJkZWZhdWx0IjogZmFsc2Us
ICJlbmFibGVkIjogdHJ1ZSwgImhpZGRlbiI6IGZhbHNlLCAibGFiZWwiOiAiVVBEQVRFX1BPTElD
WSIsICJwcm9wZXJ0aWVzIjogbnVsbCwgInV1aWQiOiAiOWQ0NzFlMDMtZjA1YS00OGYyLTg1ZDgt
NTNkNTM4YzMwNWY4IiwgInZhbHVlIjogMzczfSwgeyJkZWZhdWx0IjogZmFsc2UsICJlbmFibGVk
IjogdHJ1ZSwgImhpZGRlbiI6IGZhbHNlLCAibGFiZWwiOiAiVVBEQVRFX1NFTlNPUl9WRVJTSU9O
IiwgInByb3BlcnRpZXMiOiBudWxsLCAidXVpZCI6ICI4MWNhOTIzMC1lNjg0LTQ1ZjktYTNiOC1k
NzFiOWZlOTkxZGUiLCAidmFsdWUiOiAzNzR9XX0sIHsiYWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZh
bHNlLCAiYmxhbmtfb3B0aW9uIjogdHJ1ZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgImNoYW5nZWFi
bGUiOiB0cnVlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBm
YWxzZSwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiYWN0aW9uaW52b2NhdGlv
bi9jYXJib25fYmxhY2tfZGV2aWNlX2FjdGlvbnMiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxz
ZSwgImlkIjogNzk5LCAiaW5wdXRfdHlwZSI6ICJzZWxlY3QiLCAiaW50ZXJuYWwiOiBmYWxzZSwg
ImlzX3RyYWNrZWQiOiBmYWxzZSwgIm5hbWUiOiAiY2FyYm9uX2JsYWNrX2RldmljZV9hY3Rpb25z
IiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAib3BlcmF0aW9ucyI6IFtdLCAicGxhY2Vob2xkZXIi
OiAiIiwgInByZWZpeCI6ICJwcm9wZXJ0aWVzIiwgInJlYWRfb25seSI6IGZhbHNlLCAicmljaF90
ZXh0IjogZmFsc2UsICJ0YWdzIjogW10sICJ0ZW1wbGF0ZXMiOiBbXSwgInRleHQiOiAiQ2FyYm9u
IEJsYWNrIERldmljZSBBY3Rpb25zIiwgInRvb2x0aXAiOiAiIiwgInR5cGVfaWQiOiA2LCAidXVp
ZCI6ICI4YTIwMmFkYS1kYjRhLTQ4NTYtOGE1OS04ZDg3ZWUwOWRiZjIiLCAidmFsdWVzIjogW3si
ZGVmYXVsdCI6IGZhbHNlLCAiZW5hYmxlZCI6IHRydWUsICJoaWRkZW4iOiBmYWxzZSwgImxhYmVs
IjogIkJBQ0tHUk9VTkRfU0NBTiIsICJwcm9wZXJ0aWVzIjogbnVsbCwgInV1aWQiOiAiN2Q4MDE0
NGMtNjA4NC00NmI3LTliNzgtYjlhMDZlMzViZmUxIiwgInZhbHVlIjogMzc5fSwgeyJkZWZhdWx0
IjogZmFsc2UsICJlbmFibGVkIjogdHJ1ZSwgImhpZGRlbiI6IGZhbHNlLCAibGFiZWwiOiAiQllQ
QVNTIiwgInByb3BlcnRpZXMiOiBudWxsLCAidXVpZCI6ICIwMjJlM2YzYS03YjEzLTQwNjctODNj
Zi1kNDIxMDFhZjEwMDIiLCAidmFsdWUiOiAzODB9LCB7ImRlZmF1bHQiOiBmYWxzZSwgImVuYWJs
ZWQiOiB0cnVlLCAiaGlkZGVuIjogZmFsc2UsICJsYWJlbCI6ICJVTklOU1RBTExfU0VOU09SIiwg
InByb3BlcnRpZXMiOiBudWxsLCAidXVpZCI6ICI4ZDM3NmU2Ni05NzVhLTQzNzYtOGYwOS01ZGIz
ZmIzNTk4YzkiLCAidmFsdWUiOiAzODF9LCB7ImRlZmF1bHQiOiBmYWxzZSwgImVuYWJsZWQiOiB0
cnVlLCAiaGlkZGVuIjogZmFsc2UsICJsYWJlbCI6ICJERUxFVEVfU0VOU09SIiwgInByb3BlcnRp
ZXMiOiBudWxsLCAidXVpZCI6ICI4M2FjYTA5MC0wNzMxLTQzZGQtOTNmOC01OTJmMWFhYjEyYjQi
LCAidmFsdWUiOiAzODJ9LCB7ImRlZmF1bHQiOiBmYWxzZSwgImVuYWJsZWQiOiB0cnVlLCAiaGlk
ZGVuIjogZmFsc2UsICJsYWJlbCI6ICJRVUFSQU5USU5FIiwgInByb3BlcnRpZXMiOiBudWxsLCAi
dXVpZCI6ICI4YzgyYjcxMi1hYTYyLTQyZmQtODU1Zi1jYTQ2ZjAxYWU2NjEiLCAidmFsdWUiOiAz
ODN9LCB7ImRlZmF1bHQiOiBmYWxzZSwgImVuYWJsZWQiOiB0cnVlLCAiaGlkZGVuIjogZmFsc2Us
ICJsYWJlbCI6ICJVUERBVEVfUE9MSUNZIiwgInByb3BlcnRpZXMiOiBudWxsLCAidXVpZCI6ICJk
NTNiYmM5MC1mNmI4LTQ1NTAtYmE2Yy0yOTg0MmZkYjAyNjQiLCAidmFsdWUiOiAzODR9LCB7ImRl
ZmF1bHQiOiBmYWxzZSwgImVuYWJsZWQiOiB0cnVlLCAiaGlkZGVuIjogZmFsc2UsICJsYWJlbCI6
ICJVUERBVEVfU0VOU09SX1ZFUlNJT04iLCAicHJvcGVydGllcyI6IG51bGwsICJ1dWlkIjogImRj
MzdlNTM3LTY3MGMtNGJkYy05YjRhLTIwOGY1YmFkY2VjNSIsICJ2YWx1ZSI6IDM4NX1dfSwgeyJh
bGxvd19kZWZhdWx0X3ZhbHVlIjogZmFsc2UsICJibGFua19vcHRpb24iOiBmYWxzZSwgImNhbGN1
bGF0ZWQiOiBmYWxzZSwgImNoYW5nZWFibGUiOiB0cnVlLCAiY2hvc2VuIjogZmFsc2UsICJkZWZh
dWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImV4cG9y
dF9rZXkiOiAiYWN0aW9uaW52b2NhdGlvbi90b2dnbGVfc2V0dGluZyIsICJoaWRlX25vdGlmaWNh
dGlvbiI6IGZhbHNlLCAiaWQiOiA3OTgsICJpbnB1dF90eXBlIjogInNlbGVjdCIsICJpbnRlcm5h
bCI6IGZhbHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6ICJ0b2dnbGVfc2V0dGluZyIs
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgIm9wZXJhdGlvbnMiOiBbXSwgInBsYWNlaG9sZGVyIjog
IiIsICJwcmVmaXgiOiAicHJvcGVydGllcyIsICJyZWFkX29ubHkiOiBmYWxzZSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAidGFncyI6IFtdLCAidGVtcGxhdGVzIjogW10sICJ0ZXh0IjogIlRvZ2dsZSBT
ZXR0aW5nIiwgInRvb2x0aXAiOiAiIiwgInR5cGVfaWQiOiA2LCAidXVpZCI6ICJiNWVmNjJmYS1l
YWE1LTRlZTEtYmZkZS0wMTgzMDU1ZGM3OTciLCAidmFsdWVzIjogW3siZGVmYXVsdCI6IHRydWUs
ICJlbmFibGVkIjogdHJ1ZSwgImhpZGRlbiI6IGZhbHNlLCAibGFiZWwiOiAiT04iLCAicHJvcGVy
dGllcyI6IG51bGwsICJ1dWlkIjogImEyZmY4MmZiLWY0NWQtNDMyMy04ODBjLWJiYmIzNTEwMzQ4
MSIsICJ2YWx1ZSI6IDM3N30sIHsiZGVmYXVsdCI6IGZhbHNlLCAiZW5hYmxlZCI6IHRydWUsICJo
aWRkZW4iOiBmYWxzZSwgImxhYmVsIjogIk9GRiIsICJwcm9wZXJ0aWVzIjogbnVsbCwgInV1aWQi
OiAiMmM0MjUzZjQtOGU1MS00YzUyLWI0MDQtNDJhMGYwNDk3NmMyIiwgInZhbHVlIjogMzc4fV19
LCB7ImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAi
Y2FsY3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRydWUsICJjaG9zZW4iOiBmYWxzZSwg
ImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAi
ZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmljYXRpb24i
OiBmYWxzZSwgImlkIjogNTEsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAiaW50ZXJuYWwiOiBm
YWxzZSwgImlzX3RyYWNrZWQiOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgIm9wZXJh
dGlvbl9wZXJtcyI6IHt9LCAib3BlcmF0aW9ucyI6IFtdLCAicHJlZml4IjogbnVsbCwgInJlYWRf
b25seSI6IHRydWUsICJyaWNoX3RleHQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInRlbXBsYXRlcyI6
IFtdLCAidGV4dCI6ICJTaW11bGF0aW9uIiwgInRvb2x0aXAiOiAiV2hldGhlciB0aGUgaW5jaWRl
bnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVndWxhciBpbmNpZGVudC4gIFRoaXMgZmllbGQgaXMg
cmVhZC1vbmx5LiIsICJ0eXBlX2lkIjogMCwgInV1aWQiOiAiYzNmMGUzZWQtMjFlMS00ZDUzLWFm
ZmItZmU1Y2EzMzA4Y2NhIiwgInZhbHVlcyI6IFtdfV0sICJmdW5jdGlvbnMiOiBbeyJjcmVhdG9y
IjogeyJkaXNwbGF5X25hbWUiOiAiR2VyYWxkIFRyb3RtYW4iLCAiaWQiOiAxMywgIm5hbWUiOiAi
Z2VyYWxkLnRyb3RtYW5AaWJtLmNvbSIsICJ0eXBlIjogInVzZXIifSwgImRlc2NyaXB0aW9uIjog
eyJmb3JtYXQiOiAidGV4dCIsICJjb250ZW50IjogIlRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0
aGUgQ2FyYm9uIEJsYWNrIFBsYXRmb3JtIEFQSSBmdW5jdGlvbmFsaXR5IGZvY3VzaW5nIHNvbGVs
eSBvbiB0aGUgRGV2aWNlcyBBUEkgc3Vic2V0IG9mIGVuZHBvaW50cyB0aGF0IHNvbGVseSBxdWVy
aWVzIGEgZGV2aWNlIGFuZCBpbXBsZW1lbnRzIGEgcXVhcmFudGluZS4ifSwgImRlc3RpbmF0aW9u
X2hhbmRsZSI6ICJjYXJib25fYmxhY2tfY2xvdWQiLCAiZGlzcGxheV9uYW1lIjogIkNhcmJvbiBC
bGFjayBDbG91ZCBEZXZpY2VzIFF1YXJhbnRpbmUiLCAiZXhwb3J0X2tleSI6ICJjYXJib25fYmxh
Y2tfY2xvdWRfZGV2aWNlc19xdWFyYW50aW5lIiwgImlkIjogMTQzLCAibGFzdF9tb2RpZmllZF9i
eSI6IHsiZGlzcGxheV9uYW1lIjogIkdlcmFsZCBUcm90bWFuIiwgImlkIjogMTMsICJuYW1lIjog
ImdlcmFsZC50cm90bWFuQGlibS5jb20iLCAidHlwZSI6ICJ1c2VyIn0sICJsYXN0X21vZGlmaWVk
X3RpbWUiOiAxNTkyNzk4MjkzMDU4LCAibmFtZSI6ICJjYXJib25fYmxhY2tfY2xvdWRfZGV2aWNl
c19xdWFyYW50aW5lIiwgInRhZ3MiOiBbXSwgInV1aWQiOiAiYTc4YjRhMGItOWZjYi00NzlhLThi
MmUtYjMyZGE2ZjkwYTMzIiwgInZlcnNpb24iOiAyLCAidmlld19pdGVtcyI6IFt7ImNvbnRlbnQi
OiAiZWFkMjE0YzItMTNmZS00M2Y2LWEzYzctNjc2YTg4MzM4ZGJiIiwgImVsZW1lbnQiOiAiZmll
bGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19pZiI6IG51bGwsICJz
aG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJzdGVwX2xhYmVsIjogbnVsbH0sIHsiY29udGVudCI6
ICI5OWI2YTIxMS03MzFhLTQ5MmYtYjBmNi03OWEyMTU2MDI3YjQiLCAiZWxlbWVudCI6ICJmaWVs
ZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2lmIjogbnVsbCwgInNo
b3dfbGlua19oZWFkZXIiOiBmYWxzZSwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJjb250ZW50Ijog
ImVhODQ3OTBmLTNiYWYtNDA5NS04ZWQ5LTYyMDEyZTYwODdjMiIsICJlbGVtZW50IjogImZpZWxk
X3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfaWYiOiBudWxsLCAic2hv
d19saW5rX2hlYWRlciI6IGZhbHNlLCAic3RlcF9sYWJlbCI6IG51bGx9LCB7ImNvbnRlbnQiOiAi
ZTFlNzIwYzYtYWY5YS00ODE5LTg4ZmUtN2E0N2Q4NDAzMTU3IiwgImVsZW1lbnQiOiAiZmllbGRf
dXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19pZiI6IG51bGwsICJzaG93
X2xpbmtfaGVhZGVyIjogZmFsc2UsICJzdGVwX2xhYmVsIjogbnVsbH1dLCAid29ya2Zsb3dzIjog
W3siYWN0aW9ucyI6IFtdLCAiZGVzY3JpcHRpb24iOiBudWxsLCAibmFtZSI6ICJFeGFtcGxlOiBD
YXJib24gQmxhY2sgQ2xvdWQgRGV2aWNlcyBRdWFyYW50aW5lIiwgIm9iamVjdF90eXBlIjogImFy
dGlmYWN0IiwgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfY2FyYm9uX2JsYWNrX2Nsb3Vk
X2RldmljZXNfcXVhcmFudGluZSIsICJ0YWdzIjogW10sICJ1dWlkIjogbnVsbCwgIndvcmtmbG93
X2lkIjogMTc2fV19XSwgImdlb3MiOiBudWxsLCAiZ3JvdXBzIjogbnVsbCwgImlkIjogMTEsICJp
bmJvdW5kX21haWxib3hlcyI6IG51bGwsICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAi
aW5jaWRlbnRfdHlwZXMiOiBbeyJ1cGRhdGVfZGF0ZSI6IDE1OTI4MDU2NDQwNTQsICJjcmVhdGVf
ZGF0ZSI6IDE1OTI4MDU2NDQwNTQsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRh
MDAwNDA0NGFhMCIsICJkZXNjcmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRl
cm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCki
LCAibmFtZSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZW5hYmxlZCI6
IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVuIjogZmFs
c2UsICJpZCI6IDB9XSwgImluZHVzdHJpZXMiOiBudWxsLCAibGF5b3V0cyI6IFtdLCAibG9jYWxl
IjogbnVsbCwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3siYXBpX2tleXMiOiBbImQ5NGZjMDI2
LTAzZTktNGY1ZC1iZDQ3LWQ4MDgwMTQ0NTZjYiJdLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJl
eHBlY3RfYWNrIjogdHJ1ZSwgImV4cG9ydF9rZXkiOiAiY2FyYm9uX2JsYWNrX2Nsb3VkIiwgIm5h
bWUiOiAiQ2FyYm9uIEJsYWNrIENsb3VkIiwgInByb2dyYW1tYXRpY19uYW1lIjogImNhcmJvbl9i
bGFja19jbG91ZCIsICJ0YWdzIjogW10sICJ1c2VycyI6IFsicmVzYWRtaW5AZXhhbXBsZS5jb20i
LCAiZW1haWxzQGV4YW1wbGUuY29tIiwgIm9yY2hlc3RyYXRpb25AZXhhbXBsZS5jb20iLCAiZ2Vy
YWxkLnRyb3RtYW5AaWJtLmNvbSIsICJ3YWRhbmRAdXMuaWJtLmNvbSJdLCAidXVpZCI6ICI2ODMy
ZDM5YS1jMzBlLTQ1YTktOGM5NS1mNDdkOGEzNjZlNGYifV0sICJub3RpZmljYXRpb25zIjogbnVs
bCwgIm92ZXJyaWRlcyI6IFtdLCAicGhhc2VzIjogW10sICJyZWd1bGF0b3JzIjogbnVsbCwgInJv
bGVzIjogW10sICJzY3JpcHRzIjogW10sICJzZXJ2ZXJfdmVyc2lvbiI6IHsiYnVpbGRfbnVtYmVy
IjogNzYsICJtYWpvciI6IDM2LCAibWlub3IiOiAyLCAidmVyc2lvbiI6ICIzNi4yLjc2In0sICJ0
YWdzIjogW10sICJ0YXNrX29yZGVyIjogW10sICJ0aW1lZnJhbWVzIjogbnVsbCwgInR5cGVzIjog
W10sICJ3b3JrZmxvd3MiOiBbeyJhY3Rpb25zIjogW10sICJjb250ZW50IjogeyJ2ZXJzaW9uIjog
NiwgIndvcmtmbG93X2lkIjogImV4YW1wbGVfY2FyYm9uX2JsYWNrX2Nsb3VkX2RldmljZXNfcXVh
cmFudGluZSIsICJ4bWwiOiAiPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThc
Ij8+PGRlZmluaXRpb25zIHhtbG5zPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEw
MDUyNC9NT0RFTFwiIHhtbG5zOmJwbW5kaT1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4v
MjAxMDA1MjQvRElcIiB4bWxuczpvbWdkYz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIw
MTAwNTI0L0RDXCIgeG1sbnM6b21nZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEw
MDUyNC9ESVwiIHhtbG5zOnJlc2lsaWVudD1cImh0dHA6Ly9yZXNpbGllbnQuaWJtLmNvbS9icG1u
XCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFcIiB4bWxuczp4
c2k9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZVwiIHRhcmdldE5h
bWVzcGFjZT1cImh0dHA6Ly93d3cuY2FtdW5kYS5vcmcvdGVzdFwiPjxwcm9jZXNzIGlkPVwiZXhh
bXBsZV9jYXJib25fYmxhY2tfY2xvdWRfZGV2aWNlc19xdWFyYW50aW5lXCIgaXNFeGVjdXRhYmxl
PVwidHJ1ZVwiIG5hbWU9XCJFeGFtcGxlOiBDYXJib24gQmxhY2sgQ2xvdWQgRGV2aWNlcyBRdWFy
YW50aW5lXCI+PGRvY3VtZW50YXRpb24+VGhpcyBleGFtcGxlIHdvcmsgZmxvdyBjYWxscyB0aGUg
Q2FyYm9uIEJsYWNrIENsb3VkIERldmljZXMgQVBJIGVuZHBvaW50IGFjY2VwdHMgYSBxdWVyeSBz
dHJpbmcgaW4gdGhlIGZvcm0gb2YgYXJ0aWZhY3RzIHN1Y2ggYXMgSVBzLCBIb3N0IE5hbWVzIChk
ZXZpY2UgbmFtZXMpLCBldGMgYW5kIHBlcmZvcm1zIGEgcXVhcmFudGluZSBvZiB0aGUgZGV2aWNl
LiBSZXR1cm5zIHRoZSBzdGF0dXMgb2YgdGhlIGNvbXBsZXRpb24gb2YgdGhlIHF1YXJhbnRpbmUg
dG8gYSBub3RlIGluIHRoZSBpbmNpZGVudC48L2RvY3VtZW50YXRpb24+PHN0YXJ0RXZlbnQgaWQ9
XCJTdGFydEV2ZW50XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzBzMXh4eHU8L291
dGdvaW5nPjwvc3RhcnRFdmVudD48c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNlVGFza18wamhsMGVp
XCIgbmFtZT1cIkNhcmJvbiBCbGFjayBDbG91ZCBEZXZpY2VzIFF1YXJhbi4uLlwiIHJlc2lsaWVu
dDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5jdGlv
biB1dWlkPVwiYTc4YjRhMGItOWZjYi00NzlhLThiMmUtYjMyZGE2ZjkwYTMzXCI+e1wiaW5wdXRz
XCI6e1wiZTFlNzIwYzYtYWY5YS00ODE5LTg4ZmUtN2E0N2Q4NDAzMTU3XCI6e1wiaW5wdXRfdHlw
ZVwiOlwic3RhdGljXCIsXCJzdGF0aWNfaW5wdXRcIjp7XCJtdWx0aXNlbGVjdF92YWx1ZVwiOltd
LFwic2VsZWN0X3ZhbHVlXCI6XCJkYjA0NTM1ZC0xODAyLTRlZjEtYjM3ZC0wOTFiMDg0ZDU0MTNc
In19fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImluY2lkZW50LmFkZE5vdGUoc3RyKHJl
c3VsdHMudmFsdWUpKVwiLFwicHJlX3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpbnB1dHMuaW5jaWRl
bnRfaWQgPSBpbmNpZGVudC5pZFxcbmlucHV0cy5jYXJib25fYmxhY2tfZGV2aWNlX3F1ZXJ5X3N0
cmluZyA9IGFydGlmYWN0LnZhbHVlXFxuaW5wdXRzLmRldmljZV9hY3Rpb25fdHlwZSA9IHByb3Bl
cnRpZXMuY2FyYm9uX2JsYWNrX2RldmljZV9hY3Rpb25zXFxuaW5wdXRzLnRvZ2dsZSA9IHByb3Bl
cnRpZXMudG9nZ2xlX3NldHRpbmdcXG5cIn08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4dGVuc2lv
bkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHMxeHh4dTwvaW5jb21pbmc+PG91dGdv
aW5nPlNlcXVlbmNlRmxvd18wNHNhdGpvPC9vdXRnb2luZz48L3NlcnZpY2VUYXNrPjxzZXF1ZW5j
ZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHMxeHh4dVwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRf
MTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzBqaGwwZWlcIi8+PGVuZEV2ZW50IGlk
PVwiRW5kRXZlbnRfMTg1bWg5Y1wiPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMDRzYXRqbzwvaW5j
b21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzA0c2F0am9c
IiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wamhsMGVpXCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRf
MTg1bWg5Y1wiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+
PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRpb24+PGFz
c29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZl
bnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+PC9wcm9j
ZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1O
UGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5k
aTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0
RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2
XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBo
ZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQ
TU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9
XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2Rp
XCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1c
IjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxlbWVudD1c
IkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhfZGlcIj48b21n
ZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjIwXCIv
PjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIy
NTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJT
ZXJ2aWNlVGFza18wamhsMGVpXCIgaWQ9XCJTZXJ2aWNlVGFza18wamhsMGVpX2RpXCI+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjQwNFwiIHk9XCIxNjZcIi8+
PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5j
ZUZsb3dfMHMxeHh4dVwiIGlkPVwiU2VxdWVuY2VGbG93XzBzMXh4eHVfZGlcIj48b21nZGk6d2F5
cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdk
aTp3YXlwb2ludCB4PVwiNDA0XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+
PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwi
IHg9XCIzMDFcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRn
ZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50XzE4NW1oOWNcIiBpZD1c
IkVuZEV2ZW50XzE4NW1oOWNfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9
XCIzNlwiIHg9XCI3MThcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNzM2XCIgeT1cIjIyN1wiLz48L2JwbW5k
aTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1l
bnQ9XCJTZXF1ZW5jZUZsb3dfMDRzYXRqb1wiIGlkPVwiU2VxdWVuY2VGbG93XzA0c2F0am9fZGlc
Ij48b21nZGk6d2F5cG9pbnQgeD1cIjUwNFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNzE4XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wi
IHdpZHRoPVwiMFwiIHg9XCI2MTFcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2Jw
bW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRpYWdyYW0+PC9k
ZWZpbml0aW9ucz4ifSwgImNvbnRlbnRfdmVyc2lvbiI6IDYsICJjcmVhdG9yX2lkIjogImdlcmFs
ZC50cm90bWFuQGlibS5jb20iLCAiZGVzY3JpcHRpb24iOiAiVGhpcyBleGFtcGxlIHdvcmsgZmxv
dyBjYWxscyB0aGUgQ2FyYm9uIEJsYWNrIENsb3VkIERldmljZXMgQVBJIGVuZHBvaW50IGFjY2Vw
dHMgYSBxdWVyeSBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgYXJ0aWZhY3RzIHN1Y2ggYXMgSVBzLCBI
b3N0IE5hbWVzIChkZXZpY2UgbmFtZXMpLCBldGMgYW5kIHBlcmZvcm1zIGEgcXVhcmFudGluZSBv
ZiB0aGUgZGV2aWNlLiBSZXR1cm5zIHRoZSBzdGF0dXMgb2YgdGhlIGNvbXBsZXRpb24gb2YgdGhl
IHF1YXJhbnRpbmUgdG8gYSBub3RlIGluIHRoZSBpbmNpZGVudC4iLCAiZXhwb3J0X2tleSI6ICJl
eGFtcGxlX2NhcmJvbl9ibGFja19jbG91ZF9kZXZpY2VzX3F1YXJhbnRpbmUiLCAibGFzdF9tb2Rp
ZmllZF9ieSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIiwgImxhc3RfbW9kaWZpZWRfdGltZSI6
IDE1OTI4MDUxNTg5NzcsICJuYW1lIjogIkV4YW1wbGU6IENhcmJvbiBCbGFjayBDbG91ZCBEZXZp
Y2VzIFF1YXJhbnRpbmUiLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAicHJvZ3JhbW1hdGlj
X25hbWUiOiAiZXhhbXBsZV9jYXJib25fYmxhY2tfY2xvdWRfZGV2aWNlc19xdWFyYW50aW5lIiwg
InRhZ3MiOiBbXSwgInV1aWQiOiAiMzlhOTMwYWYtNDg3ZS00NGNmLWJmNmQtNDllMjFjYTMwZGY3
IiwgIndvcmtmbG93X2lkIjogMTc2fV0sICJ3b3Jrc3BhY2VzIjogW119
"""
    )