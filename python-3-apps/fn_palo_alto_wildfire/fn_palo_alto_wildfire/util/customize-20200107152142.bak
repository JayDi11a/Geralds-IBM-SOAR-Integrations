# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_palo_alto_wildfire"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_palo_alto_wildfire package"""
    reload_params = {"package": u"fn_palo_alto_wildfire",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"artifact_type", u"artifact_value", u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"palo_alto_wildfire"], 
                    "functions": [u"palo_alto_wildfire_url_submission"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_palo_alto_wildfire_url_submission"], 
                    "actions": [u"Example: Submit URL to WildFire"], 
                    "incident_artifact_types": [] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     artifact_type
    #     artifact_value
    #     incident_id
    #   Message Destinations:
    #     palo_alto_wildfire
    #   Functions:
    #     palo_alto_wildfire_url_submission
    #   Workflows:
    #     example_palo_alto_wildfire_url_submission
    #   Rules:
    #     Example: Submit URL to WildFire


    yield ImportDefinition(u"""
eyJhY3Rpb25fb3JkZXIiOiBbXSwgImFjdGlvbnMiOiBbeyJhdXRvbWF0aW9ucyI6IFtdLCAiY29u
ZGl0aW9ucyI6IFtdLCAiZW5hYmxlZCI6IHRydWUsICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IFN1
Ym1pdCBVUkwgdG8gV2lsZEZpcmUiLCAiaWQiOiAyNzcsICJsb2dpY190eXBlIjogImFsbCIsICJt
ZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlOiBTdWJtaXQgVVJMIHRv
IFdpbGRGaXJlIiwgIm9iamVjdF90eXBlIjogImFydGlmYWN0IiwgInRhZ3MiOiBbXSwgInRpbWVv
dXRfc2Vjb25kcyI6IDg2NDAwLCAidHlwZSI6IDEsICJ1dWlkIjogIjUyNGRmZjIyLWZmZTQtNDFi
Yy1hNDViLWNkNGFhOTBmYzcyMCIsICJ2aWV3X2l0ZW1zIjogW10sICJ3b3JrZmxvd3MiOiBbImV4
YW1wbGVfcGFsb19hbHRvX3dpbGRmaXJlX3VybF9zdWJtaXNzaW9uIl19XSwgImF1dG9tYXRpY190
YXNrcyI6IFtdLCAiZXhwb3J0X2RhdGUiOiAxNTc4Mzk2NDkzNDQ2LCAiZXhwb3J0X2Zvcm1hdF92
ZXJzaW9uIjogMiwgImZpZWxkcyI6IFt7ImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImJs
YW5rX29wdGlvbiI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRy
dWUsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAi
ZGVwcmVjYXRlZCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2FydGlmYWN0X3Zh
bHVlIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJpZCI6IDE0OSwgImlucHV0X3R5cGUi
OiAidGV4dCIsICJpbnRlcm5hbCI6IGZhbHNlLCAiaXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6
ICJhcnRpZmFjdF92YWx1ZSIsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgIm9wZXJhdGlvbnMiOiBb
XSwgInBsYWNlaG9sZGVyIjogIiIsICJwcmVmaXgiOiBudWxsLCAicmVhZF9vbmx5IjogZmFsc2Us
ICJyaWNoX3RleHQiOiBmYWxzZSwgInRhZ3MiOiBbXSwgInRlbXBsYXRlcyI6IFtdLCAidGV4dCI6
ICJhcnRpZmFjdF92YWx1ZSIsICJ0b29sdGlwIjogIiIsICJ0eXBlX2lkIjogMTEsICJ1dWlkIjog
IjliYTQ5ODg3LTBkY2YtNDBjZS1hNWVhLTljMGM0M2Y4MzFiZiIsICJ2YWx1ZXMiOiBbXX0sIHsi
YWxsb3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJjYWxj
dWxhdGVkIjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImNob3NlbiI6IGZhbHNlLCAiZGVm
YXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJkZXByZWNhdGVkIjogZmFsc2UsICJleHBv
cnRfa2V5IjogIl9fZnVuY3Rpb24vaW5jaWRlbnRfaWQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBm
YWxzZSwgImlkIjogMTE1LCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAiaW50ZXJuYWwiOiBmYWxz
ZSwgImlzX3RyYWNrZWQiOiBmYWxzZSwgIm5hbWUiOiAiaW5jaWRlbnRfaWQiLCAib3BlcmF0aW9u
X3Blcm1zIjoge30sICJvcGVyYXRpb25zIjogW10sICJwbGFjZWhvbGRlciI6ICIiLCAicHJlZml4
IjogbnVsbCwgInJlYWRfb25seSI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0YWdzIjog
W10sICJ0ZW1wbGF0ZXMiOiBbXSwgInRleHQiOiAiaW5jaWRlbnRfaWQiLCAidG9vbHRpcCI6ICIi
LCAidHlwZV9pZCI6IDExLCAidXVpZCI6ICJlYWQyMTRjMi0xM2ZlLTQzZjYtYTNjNy02NzZhODgz
MzhkYmIiLCAidmFsdWVzIjogW119LCB7ImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImJs
YW5rX29wdGlvbiI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAiY2hhbmdlYWJsZSI6IHRy
dWUsICJjaG9zZW4iOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAi
ZGVwcmVjYXRlZCI6IGZhbHNlLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2FydGlmYWN0X3R5
cGUiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgImlkIjogMTUwLCAiaW5wdXRfdHlwZSI6
ICJ0ZXh0IiwgImludGVybmFsIjogZmFsc2UsICJpc190cmFja2VkIjogZmFsc2UsICJuYW1lIjog
ImFydGlmYWN0X3R5cGUiLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJvcGVyYXRpb25zIjogW10s
ICJwbGFjZWhvbGRlciI6ICIiLCAicHJlZml4IjogbnVsbCwgInJlYWRfb25seSI6IGZhbHNlLCAi
cmljaF90ZXh0IjogZmFsc2UsICJ0YWdzIjogW10sICJ0ZW1wbGF0ZXMiOiBbXSwgInRleHQiOiAi
YXJ0aWZhY3RfdHlwZSIsICJ0b29sdGlwIjogIiIsICJ0eXBlX2lkIjogMTEsICJ1dWlkIjogIjNh
MmUzNDdiLTY3MmUtNDI2My04Nzg3LWEzZTllYmE0YWM5MSIsICJ2YWx1ZXMiOiBbXX0sIHsiYWxs
b3dfZGVmYXVsdF92YWx1ZSI6IGZhbHNlLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJjYWxjdWxh
dGVkIjogZmFsc2UsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImNob3NlbiI6IGZhbHNlLCAiZGVmYXVs
dF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJkZXByZWNhdGVkIjogZmFsc2UsICJleHBvcnRf
a2V5IjogImluY2lkZW50L2luY190cmFpbmluZyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNl
LCAiaWQiOiAzNywgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJpbnRlcm5hbCI6IGZhbHNlLCAi
aXNfdHJhY2tlZCI6IGZhbHNlLCAibmFtZSI6ICJpbmNfdHJhaW5pbmciLCAib3BlcmF0aW9uX3Bl
cm1zIjoge30sICJvcGVyYXRpb25zIjogW10sICJwcmVmaXgiOiBudWxsLCAicmVhZF9vbmx5Ijog
dHJ1ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGFncyI6IFtdLCAidGVtcGxhdGVzIjogW10sICJ0
ZXh0IjogIlNpbXVsYXRpb24iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBh
IHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9u
bHkuIiwgInR5cGVfaWQiOiAwLCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVj
YTMzMDhjY2EiLCAidmFsdWVzIjogW119XSwgImZ1bmN0aW9ucyI6IFt7ImNyZWF0b3IiOiB7ImRp
c3BsYXlfbmFtZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJpZCI6IDQsICJuYW1lIjogImdlcmFsZC50
cm90bWFuQGlibS5jb20iLCAidHlwZSI6ICJ1c2VyIn0sICJkZXNjcmlwdGlvbiI6IHsiZm9ybWF0
IjogInRleHQiLCAiY29udGVudCI6ICJUaGlzIGZ1bmN0aW9uIHN1Ym1pdHMgYSBVUkwgaW4gdGhl
IFJlc2lsaWVudCBJbmNpZGVudCBhbmQgc3VibWl0cyBpdCB0byB0aGUgUGFsbyBBbHRvIFdpbGRG
aXJlIGVuZHBvaW50LiBUaGUgcmVzdWx0cyBvZiB0aGUgdXJsIHN1Ym1pc3Npb24gYXJlIHRoZW4g
cmV0dXJuZWQgdG8gdGhlIEluY2lkZW50LiJ9LCAiZGVzdGluYXRpb25faGFuZGxlIjogInBhbG9f
YWx0b193aWxkZmlyZSIsICJkaXNwbGF5X25hbWUiOiAiUGFsbyBBbHRvIFdpbGRmaXJlIFVybCBT
dWJtaXNzaW9uIiwgImV4cG9ydF9rZXkiOiAicGFsb19hbHRvX3dpbGRmaXJlX3VybF9zdWJtaXNz
aW9uIiwgImlkIjogMjQ1LCAibGFzdF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIkdl
cmFsZCBUcm90bWFuIiwgImlkIjogNCwgIm5hbWUiOiAiZ2VyYWxkLnRyb3RtYW5AaWJtLmNvbSIs
ICJ0eXBlIjogInVzZXIifSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NzgyNTU0Mjk2OTAsICJu
YW1lIjogInBhbG9fYWx0b193aWxkZmlyZV91cmxfc3VibWlzc2lvbiIsICJ0YWdzIjogW10sICJ1
dWlkIjogIjg4NWIxMGYwLTcwYjktNDllZC1iOWYxLWFmOWYwZTMxNjMwNyIsICJ2ZXJzaW9uIjog
MiwgInZpZXdfaXRlbXMiOiBbeyJjb250ZW50IjogImVhZDIxNGMyLTEzZmUtNDNmNi1hM2M3LTY3
NmE4ODMzOGRiYiIsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiZmllbGRfdHlwZSI6ICJfX2Z1
bmN0aW9uIiwgInNob3dfaWYiOiBudWxsLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAic3Rl
cF9sYWJlbCI6IG51bGx9LCB7ImNvbnRlbnQiOiAiOWJhNDk4ODctMGRjZi00MGNlLWE1ZWEtOWMw
YzQzZjgzMWJmIiwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJmaWVsZF90eXBlIjogIl9fZnVu
Y3Rpb24iLCAic2hvd19pZiI6IG51bGwsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJzdGVw
X2xhYmVsIjogbnVsbH0sIHsiY29udGVudCI6ICIzYTJlMzQ3Yi02NzJlLTQyNjMtODc4Ny1hM2U5
ZWJhNGFjOTEiLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImZpZWxkX3R5cGUiOiAiX19mdW5j
dGlvbiIsICJzaG93X2lmIjogbnVsbCwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgInN0ZXBf
bGFiZWwiOiBudWxsfV0sICJ3b3JrZmxvd3MiOiBbeyJhY3Rpb25zIjogW10sICJkZXNjcmlwdGlv
biI6IG51bGwsICJuYW1lIjogIkV4YW1wbGU6IFBhbG8gQWx0byBXaWxkZmlyZSBVUkwgU3VibWlz
c2lvbiIsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJl
eGFtcGxlX3BhbG9fYWx0b193aWxkZmlyZV91cmxfc3VibWlzc2lvbiIsICJ0YWdzIjogW10sICJ1
dWlkIjogbnVsbCwgIndvcmtmbG93X2lkIjogMjUwfV19XSwgImdlb3MiOiBudWxsLCAiZ3JvdXBz
IjogbnVsbCwgImlkIjogMTE0LCAiaW5ib3VuZF9tYWlsYm94ZXMiOiBudWxsLCAiaW5jaWRlbnRf
YXJ0aWZhY3RfdHlwZXMiOiBbXSwgImluY2lkZW50X3R5cGVzIjogW3sidXBkYXRlX2RhdGUiOiAx
NTc4NDI1OTM4MzcxLCAiY3JlYXRlX2RhdGUiOiAxNTc4NDI1OTM4MzcxLCAidXVpZCI6ICJiZmVl
YzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9t
aXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlv
biBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAo
aW50ZXJuYWwpIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lk
IjogbnVsbCwgImhpZGRlbiI6IGZhbHNlLCAiaWQiOiAwfV0sICJpbmR1c3RyaWVzIjogbnVsbCwg
ImxheW91dHMiOiBbXSwgImxvY2FsZSI6IG51bGwsICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFt7
ImFwaV9rZXlzIjogW10sICJkZXN0aW5hdGlvbl90eXBlIjogMCwgImV4cGVjdF9hY2siOiB0cnVl
LCAiZXhwb3J0X2tleSI6ICJwYWxvX2FsdG9fd2lsZGZpcmUiLCAibmFtZSI6ICJQYWxvIEFsdG8g
V2lsZEZpcmUiLCAicHJvZ3JhbW1hdGljX25hbWUiOiAicGFsb19hbHRvX3dpbGRmaXJlIiwgInRh
Z3MiOiBbXSwgInVzZXJzIjogWyJnZXJhbGQudHJvdG1hbkBpYm0uY29tIl0sICJ1dWlkIjogImY2
ZTliMjczLTg3OWYtNDQzYi1hZTU5LWNiMDU1ZDFjMzM3MyJ9XSwgIm5vdGlmaWNhdGlvbnMiOiBu
dWxsLCAib3ZlcnJpZGVzIjogW10sICJwaGFzZXMiOiBbXSwgInJlZ3VsYXRvcnMiOiBudWxsLCAi
cm9sZXMiOiBbXSwgInNjcmlwdHMiOiBbXSwgInNlcnZlcl92ZXJzaW9uIjogeyJidWlsZF9udW1i
ZXIiOiA1NDY4LCAibWFqb3IiOiAzNSwgIm1pbm9yIjogMCwgInZlcnNpb24iOiAiMzUuMC41NDY4
In0sICJ0YWdzIjogW10sICJ0YXNrX29yZGVyIjogW10sICJ0aW1lZnJhbWVzIjogbnVsbCwgInR5
cGVzIjogW10sICJ3b3JrZmxvd3MiOiBbeyJhY3Rpb25zIjogW10sICJjb250ZW50IjogeyJ2ZXJz
aW9uIjogOSwgIndvcmtmbG93X2lkIjogImV4YW1wbGVfcGFsb19hbHRvX3dpbGRmaXJlX3VybF9z
dWJtaXNzaW9uIiwgInhtbCI6ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYt
OFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIw
MTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBN
Ti8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQv
MjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIw
MTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDovL3Jlc2lsaWVudC5pYm0uY29tL2Jw
bW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYVwiIHhtbG5z
OnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgdGFyZ2V0
TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9XCJl
eGFtcGxlX3BhbG9fYWx0b193aWxkZmlyZV91cmxfc3VibWlzc2lvblwiIGlzRXhlY3V0YWJsZT1c
InRydWVcIiBuYW1lPVwiRXhhbXBsZTogUGFsbyBBbHRvIFdpbGRmaXJlIFVSTCBTdWJtaXNzaW9u
XCI+PGRvY3VtZW50YXRpb24+VGhpcyB3b3JrZmxvdyBjYWxscyBhIGZ1bmN0aW9uIHRoYXQgc3Vi
bWl0cyBhIHVybCB0byB0aGUgUGFsbyBBbHRvIFdpbGRmaXJlIGVuZHBvaW50LiBUaGUgcmVzdWx0
cyBvZiB0aGUgdXJsIHN1Ym1pc3Npb24gYXJlIHRoZW4gcmV0dXJuZWQgdG8gdGhlIGluY2lkZW50
LjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxv
dXRnb2luZz5TZXF1ZW5jZUZsb3dfMDNoZHQyZjwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2
aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzBuajY5cHdcIiBuYW1lPVwiUGFsbyBBbHRvIFdpbGRm
aXJlIFVybCBTdWJtaXNzaW9uXCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNp
b25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI4ODViMTBmMC03MGI5LTQ5ZWQt
YjlmMS1hZjlmMGUzMTYzMDdcIj57XCJpbnB1dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3Jp
cHRcIjpcImluY2lkZW50LmFkZE5vdGUoJ1RoZSByZXN1bHQgb2YgdXJsIHN1Ym1pc3Npb24gYXJl
IFxcXCJ7fVxcXCInLmZvcm1hdChyZXN1bHRzLnZhbHVlKSlcIixcInByZV9wcm9jZXNzaW5nX3Nj
cmlwdFwiOlwiaW5wdXRzLmluY2lkZW50X2lkID0gaW5jaWRlbnQuaWRcXG5pbnB1dHMuYXJ0aWZh
Y3RfdmFsdWUgPSBhcnRpZmFjdC52YWx1ZVwiLFwicmVzdWx0X25hbWVcIjpcIlwifTwvcmVzaWxp
ZW50OmZ1bmN0aW9uPjwvZXh0ZW5zaW9uRWxlbWVudHM+PGluY29taW5nPlNlcXVlbmNlRmxvd18w
M2hkdDJmPC9pbmNvbWluZz48b3V0Z29pbmc+U2VxdWVuY2VGbG93XzFncHN4a288L291dGdvaW5n
Pjwvc2VydmljZVRhc2s+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18wM2hkdDJmXCIg
c291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiU2VydmljZVRhc2tf
MG5qNjlwd1wiLz48ZW5kRXZlbnQgaWQ9XCJFbmRFdmVudF8wbjN1aDFoXCI+PGluY29taW5nPlNl
cXVlbmNlRmxvd18xZ3BzeGtvPC9pbmNvbWluZz48L2VuZEV2ZW50PjxzZXF1ZW5jZUZsb3cgaWQ9
XCJTZXF1ZW5jZUZsb3dfMWdwc3hrb1wiIHNvdXJjZVJlZj1cIlNlcnZpY2VUYXNrXzBuajY5cHdc
IiB0YXJnZXRSZWY9XCJFbmRFdmVudF8wbjN1aDFoXCIvPjx0ZXh0QW5ub3RhdGlvbiBpZD1cIlRl
eHRBbm5vdGF0aW9uXzFreHhpeXRcIj48dGV4dD5TdGFydCB5b3VyIHdvcmtmbG93IGhlcmU8L3Rl
eHQ+PC90ZXh0QW5ub3RhdGlvbj48YXNzb2NpYXRpb24gaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4
XCIgc291cmNlUmVmPVwiU3RhcnRFdmVudF8xNTVhc3htXCIgdGFyZ2V0UmVmPVwiVGV4dEFubm90
YXRpb25fMWt4eGl5dFwiLz48L3Byb2Nlc3M+PGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD1cIkJQTU5E
aWFncmFtXzFcIj48YnBtbmRpOkJQTU5QbGFuZSBicG1uRWxlbWVudD1cInVuZGVmaW5lZFwiIGlk
PVwiQlBNTlBsYW5lXzFcIj48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlN0YXJ0RXZl
bnRfMTU1YXN4bVwiIGlkPVwiU3RhcnRFdmVudF8xNTVhc3htX2RpXCI+PG9tZ2RjOkJvdW5kcyBo
ZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiMTYyXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQ
TU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjBcIiB3aWR0aD1cIjkwXCIgeD1cIjE1N1wi
IHk9XCIyMjNcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRp
OkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIiBpZD1cIlRl
eHRBbm5vdGF0aW9uXzFreHhpeXRfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjMwXCIgd2lk
dGg9XCIxMDBcIiB4PVwiOTlcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRp
OkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIGlkPVwiQXNzb2Np
YXRpb25fMXNldWo0OF9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTY5XCIgeHNpOnR5cGU9XCJv
bWdkYzpQb2ludFwiIHk9XCIyMjBcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIxNTNcIiB4c2k6dHlw
ZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQ
TU5TaGFwZSBicG1uRWxlbWVudD1cIlNlcnZpY2VUYXNrXzBuajY5cHdcIiBpZD1cIlNlcnZpY2VU
YXNrXzBuajY5cHdfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjgwXCIgd2lkdGg9XCIxMDBc
IiB4PVwiNDIyXCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRn
ZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wM2hkdDJmXCIgaWQ9XCJTZXF1ZW5jZUZsb3df
MDNoZHQyZl9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIyOTZcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjI5NlwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDIyXCIgeHNp
OnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIzMTFcIiB5PVwiMTk5LjVcIi8+
PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJw
bW5FbGVtZW50PVwiRW5kRXZlbnRfMG4zdWgxaFwiIGlkPVwiRW5kRXZlbnRfMG4zdWgxaF9kaVwi
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjcyMS4yODU3MTQy
ODU3MTQyXCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjczOS4yODU3MTQyODU3MTQyXCIgeT1cIjIyN1wiLz48
L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBt
bkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMWdwc3hrb1wiIGlkPVwiU2VxdWVuY2VGbG93XzFncHN4
a29fZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjUyMlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNzIxXCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI2MjEuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlh
Z3JhbT48L2RlZmluaXRpb25zPiJ9LCAiY29udGVudF92ZXJzaW9uIjogOSwgImNyZWF0b3JfaWQi
OiAiZ2VyYWxkLnRyb3RtYW5AaWJtLmNvbSIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIHdvcmtmbG93
IGNhbGxzIGEgZnVuY3Rpb24gdGhhdCBzdWJtaXRzIGEgdXJsIHRvIHRoZSBQYWxvIEFsdG8gV2ls
ZGZpcmUgZW5kcG9pbnQuIFRoZSByZXN1bHRzIG9mIHRoZSB1cmwgc3VibWlzc2lvbiBhcmUgdGhl
biByZXR1cm5lZCB0byB0aGUgaW5jaWRlbnQuIiwgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9wYWxv
X2FsdG9fd2lsZGZpcmVfdXJsX3N1Ym1pc3Npb24iLCAibGFzdF9tb2RpZmllZF9ieSI6ICJnZXJh
bGQudHJvdG1hbkBpYm0uY29tIiwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NzgyMjI5NTMxNTIs
ICJuYW1lIjogIkV4YW1wbGU6IFBhbG8gQWx0byBXaWxkZmlyZSBVUkwgU3VibWlzc2lvbiIsICJv
YmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3Bh
bG9fYWx0b193aWxkZmlyZV91cmxfc3VibWlzc2lvbiIsICJ0YWdzIjogW10sICJ1dWlkIjogIjlk
YjAzM2ZiLTNhYWEtNDVkNC04OTI4LWNiNmJiMzQ1ZjMyMSIsICJ3b3JrZmxvd19pZCI6IDI1MH1d
LCAid29ya3NwYWNlcyI6IFtdfQ==
"""
    )