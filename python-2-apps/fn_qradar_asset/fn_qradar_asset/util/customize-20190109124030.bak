# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_qradar_asset"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_qradar_asset package"""
    reload_params = {"package": u"fn_qradar_asset",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"incident_id"], 
                    "datatables": [u"qradar_asset_results"], 
                    "message_destinations": [u"qradar"], 
                    "functions": [u"qradar_asset_query"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_qradar_asset_search"], 
                    "actions": [u"Example: QRadar Query"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     incident_id
    #   DataTables:
    #     qradar_asset_results
    #   Message Destinations:
    #     qradar
    #   Functions:
    #     qradar_asset_query
    #   Workflows:
    #     example_qradar_asset_search
    #   Rules:
    #     Example: QRadar Query


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjJiMTNhZDcyLTM4YmYt
NGIzNi1hZDM2LTZjZjhhMGM3Yzk4NCIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIHdvcmtmbG93IGRl
bW9uc3RyYXRlcyB0aGUgYWJpbGl0eSB0byBydW4gdGhlIFFSYWRhciBmdW5jdGlvbiB3aGljaCBp
ZGVudGlmaWVzIHRlY2huaWNhbCBuYW1lIGFuZCBjb250YWN0IGluZm9ybWF0aW9uIGZyb20gYW4g
YXNzZXQgYW5kIGFkZHMgaXQgdG8gYSBkYXRhIHRhYmxlIGluIHRoZSBpbmNpZGVudC4iLCAib2Jq
ZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3FyYWRhcl9hc3Nl
dF9zZWFyY2giLCAid29ya2Zsb3dfaWQiOiAxNTQsICJsYXN0X21vZGlmaWVkX2J5IjogImdlcmFs
ZC50cm90bWFuQGlibS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIx
LjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cu
b21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3
dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8v
cmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hl
bWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rl
c3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfcXJhZGFyX2Fzc2V0X3NlYXJjaFwiIGlzRXhlY3V0
YWJsZT1cInRydWVcIiBuYW1lPVwiRXhhbXBsZTogUVJhZGFyIEFzc2V0IFNlYXJjaFwiPjxkb2N1
bWVudGF0aW9uPlRoaXMgd29ya2Zsb3cgZGVtb25zdHJhdGVzIHRoZSBhYmlsaXR5IHRvIHJ1biB0
aGUgUVJhZGFyIGZ1bmN0aW9uIHdoaWNoIGlkZW50aWZpZXMgdGVjaG5pY2FsIG5hbWUgYW5kIGNv
bnRhY3QgaW5mb3JtYXRpb24gZnJvbSBhbiBhc3NldCBhbmQgYWRkcyBpdCB0byBhIGRhdGEgdGFi
bGUgaW4gdGhlIGluY2lkZW50LjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMHV4ZTRnYzwvb3V0Z29pbmc+
PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzBzMDEwdzdcIiBuYW1l
PVwiUVJhZGFyIEFzc2V0IFF1ZXJ5XCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRl
bnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI5ZjdlMzFmNS04ZTEyLTRh
MzQtOWVhYi01OTg4MmEyN2M5YWJcIj57XCJpbnB1dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19z
Y3JpcHRcIjpcImFzc2V0X3Jlc3VsdHMgPSByZXN1bHRzLnZhbHVlXFxuXFxuZm9yIGFzc2V0X3Jl
c3VsdCBpbiBhc3NldF9yZXN1bHRzOlxcbiAgcm93ID0gaW5jaWRlbnQuYWRkUm93KFxcXCJxcmFk
YXJfYXNzZXRfc2VhcmNoXFxcIilcXG4gIHJvdy5hc3NldF9pZCA9IGFzc2V0X3Jlc3VsdFsnYXNz
ZXRfaWQnXVxcbiAgcm93LnRlY2huaWNhbF9jb250YWN0ID0gYXNzZXRfcmVzdWx0Wydhc3NldF90
ZWNobmljYWxfY29udGFjdCddXFxuICByb3cudGVjaG5pY2FsX25hbWUgPSBhc3NldF9yZXN1bHRb
J2Fzc2V0X3RlY2huaWNhbF9uYW1lJ11cIixcInByZV9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5w
dXRzLmluY2lkZW50X2lkID0gaW5jaWRlbnQuaWRcIn08L3Jlc2lsaWVudDpmdW5jdGlvbj48L2V4
dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMHV4ZTRnYzwvaW5jb21pbmc+
PG91dGdvaW5nPlNlcXVlbmNlRmxvd18wajg1YjgxPC9vdXRnb2luZz48L3NlcnZpY2VUYXNrPjxz
ZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMHV4ZTRnY1wiIHNvdXJjZVJlZj1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzBzMDEwdzdcIi8+PGVuZEV2
ZW50IGlkPVwiRW5kRXZlbnRfMTQ3bHlsOFwiPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMGo4NWI4
MTwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzBq
ODViODFcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18wczAxMHc3XCIgdGFyZ2V0UmVmPVwiRW5k
RXZlbnRfMTQ3bHlsOFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4
aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90YXRp
b24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1cIlN0
YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRcIi8+
PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJwbW5k
aTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8xXCI+
PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBpZD1c
IlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0
aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJv
dW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwvYnBt
bmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVs
ZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4
aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1cIjk5
XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1uRWxl
bWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhfZGlc
Ij48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwi
IHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1l
bnQ9XCJTZXJ2aWNlVGFza18wczAxMHc3XCIgaWQ9XCJTZXJ2aWNlVGFza18wczAxMHc3X2RpXCI+
PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjQ4OVwiIHk9XCIx
NjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJT
ZXF1ZW5jZUZsb3dfMHV4ZTRnY1wiIGlkPVwiU2VxdWVuY2VGbG93XzB1eGU0Z2NfZGlcIj48b21n
ZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIv
PjxvbWdkaTp3YXlwb2ludCB4PVwiNDg5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIy
MDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRo
PVwiMFwiIHg9XCIzNDMuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRp
OkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiRW5kRXZlbnRfMTQ3bHls
OFwiIGlkPVwiRW5kRXZlbnRfMTQ3bHlsOF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZc
IiB3aWR0aD1cIjM2XCIgeD1cIjc5MVwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI4MDlcIiB5PVwiMjI3XCIv
PjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBi
cG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18wajg1YjgxXCIgaWQ9XCJTZXF1ZW5jZUZsb3dfMGo4
NWI4MV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiNTg5XCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCI3OTFcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjY5MFwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlh
Z3JhbT48L2RlZmluaXRpb25zPiIsICJ3b3JrZmxvd19pZCI6ICJleGFtcGxlX3FyYWRhcl9hc3Nl
dF9zZWFyY2giLCAidmVyc2lvbiI6IDR9LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU0NzAzODg3
NzYxMywgImNyZWF0b3JfaWQiOiAiZ2VyYWxkLnRyb3RtYW5AaWJtLmNvbSIsICJhY3Rpb25zIjog
W10sICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3FyYWRhcl9hc3NldF9zZWFyY2giLCAi
bmFtZSI6ICJFeGFtcGxlOiBRUmFkYXIgQXNzZXQgU2VhcmNoIn1dLCAiYWN0aW9ucyI6IFt7Imxv
Z2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiRXhhbXBsZTogUVJhZGFyIFF1ZXJ5IiwgInZpZXdf
aXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dzIjogWyJleGFtcGxlX3FyYWRhcl9hc3Nl
dF9zZWFyY2giXSwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgInRpbWVvdXRfc2Vjb25kcyI6
IDg2NDAwLCAidXVpZCI6ICIzODdlYzM3Yi05MTExLTQzOGEtOGNjMC00NTIxY2M4M2YxMDMiLCAi
YXV0b21hdGlvbnMiOiBbXSwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogUVJhZGFyIFF1ZXJ5Iiwg
ImNvbmRpdGlvbnMiOiBbXSwgImlkIjogMTY5LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXX1d
LCAibGF5b3V0cyI6IFtdLCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImlkIjogNTYsICJp
bmR1c3RyaWVzIjogbnVsbCwgInBoYXNlcyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJnZW9z
IjogbnVsbCwgImxvY2FsZSI6IG51bGwsICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMiwg
InZlcnNpb24iOiAiMzIuMC40NTAyIiwgImJ1aWxkX251bWJlciI6IDQ1MDIsICJtaW5vciI6IDB9
LCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3BhY2VzIjogW10sICJhdXRvbWF0aWNfdGFza3Mi
OiBbXSwgImZ1bmN0aW9ucyI6IFt7ImRpc3BsYXlfbmFtZSI6ICJRUmFkYXIgQXNzZXQgUXVlcnki
LCAiZGVzY3JpcHRpb24iOiB7ImNvbnRlbnQiOiAiVGhpcyBmdW5jdGlvbiBpcyBhIHNpbXBsZSBx
dWVyeSBvZiBRUmFkYXIgYXNzZXQgaW5mb3JtYXRpb24uIFRoaXMganVzdCBmaW5kcyBhbGwgYXNz
ZXRzIHRoYXQgY29udGFpbnMgcGhvbmUgbnVtYmVycyBhbmQgY29udGFjdCBuYW1lIGFuZCByZXR1
cm5zIHRoZW0gdG8gYSBkYXRhIHRhYmxlLiIsICJmb3JtYXQiOiAidGV4dCJ9LCAiY3JlYXRvciI6
IHsiZGlzcGxheV9uYW1lIjogIkdlcmFsZCBUcm90bWFuIiwgInR5cGUiOiAidXNlciIsICJpZCI6
IDQsICJuYW1lIjogImdlcmFsZC50cm90bWFuQGlibS5jb20ifSwgInZpZXdfaXRlbXMiOiBbeyJz
aG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVh
ZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICJlYWQyMTRj
Mi0xM2ZlLTQzZjYtYTNjNy02NzZhODgzMzhkYmIiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4
cG9ydF9rZXkiOiAicXJhZGFyX2Fzc2V0X3F1ZXJ5IiwgInV1aWQiOiAiOWY3ZTMxZjUtOGUxMi00
YTM0LTllYWItNTk4ODJhMjdjOWFiIiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7ImRpc3BsYXlfbmFt
ZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiA0LCAibmFtZSI6ICJn
ZXJhbGQudHJvdG1hbkBpYm0uY29tIn0sICJ2ZXJzaW9uIjogMSwgIndvcmtmbG93cyI6IFt7ImRl
c2NyaXB0aW9uIjogbnVsbCwgIm9iamVjdF90eXBlIjogImluY2lkZW50IiwgImFjdGlvbnMiOiBb
XSwgIm5hbWUiOiAiRXhhbXBsZTogUVJhZGFyIEFzc2V0IFNlYXJjaCIsICJ3b3JrZmxvd19pZCI6
IDE1NCwgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfcXJhZGFyX2Fzc2V0X3NlYXJjaCIs
ICJ1dWlkIjogbnVsbH1dLCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU0NzAzNjIwNTk1MiwgImRl
c3RpbmF0aW9uX2hhbmRsZSI6ICJxcmFkYXIiLCAiaWQiOiAxNzIsICJuYW1lIjogInFyYWRhcl9h
c3NldF9xdWVyeSJ9XSwgIm5vdGlmaWNhdGlvbnMiOiBudWxsLCAicmVndWxhdG9ycyI6IG51bGws
ICJpbmNpZGVudF90eXBlcyI6IFt7ImNyZWF0ZV9kYXRlIjogMTU0NzA1MTI2NTQ4NCwgImRlc2Ny
aXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJleHBvcnRfa2V5
IjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJpZCI6IDAsICJuYW1lIjog
IkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIsICJ1cGRhdGVfZGF0ZSI6IDE1NDcw
NTEyNjU0ODQsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFlOC1hZDM5LTRhMDAwNDA0NGFhMCIs
ICJlbmFibGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxzZSwgInBhcmVudF9pZCI6IG51bGwsICJo
aWRkZW4iOiBmYWxzZX1dLCAic2NyaXB0cyI6IFtdLCAidHlwZXMiOiBbeyJmb3Jfd29ya2Zsb3dz
IjogZmFsc2UsICJkaXNwbGF5X25hbWUiOiAiUVJhZGFyIEFzc2V0IFJlc3VsdHMiLCAidXVpZCI6
ICI3ZGQyMTQwMS1kZDY4LTQ2MTctOWM2YS1hYjEyZWQ4Nzc4OWQiLCAidHlwZV9pZCI6IDgsICJm
aWVsZHMiOiB7ImFzc2V0X2lkIjogeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMTAwMiwg
Im9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJBc3NldCBJZCIsICJibGFua19vcHRpb24i
OiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMTkyLCAi
cmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjBkOTA5NjJjLWUwY2EtNDc4MC1hNzkyLTE1ODBk
MTkxYzFjMyIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlw
IjogIiIsICJ3aWR0aCI6IDE4MywgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxz
ZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJxcmFkYXJfYXNzZXRfcmVzdWx0cy9h
c3NldF9pZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwg
Im5hbWUiOiAiYXNzZXRfaWQiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5f
Ynlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXSwgIm9yZGVyIjogMH0sICJ0ZWNobmljYWxf
Y29udGFjdCI6IHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDEwMDIsICJvcGVyYXRpb25f
cGVybXMiOiB7fSwgInRleHQiOiAiVGVjaG5pY2FsIENvbnRhY3QiLCAiYmxhbmtfb3B0aW9uIjog
ZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDE5MywgInJl
YWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIyMTE2NmI3YS0yZTM2LTQzNWUtODgyYy1jOGZkYTNm
ZDkzZDgiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogInRleHQiLCAidG9vbHRpcCI6
ICIiLCAid2lkdGgiOiAyNTksICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2Us
ICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAicXJhZGFyX2Fzc2V0X3Jlc3VsdHMvdGVj
aG5pY2FsX2NvbnRhY3QiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVy
IjogIiIsICJuYW1lIjogInRlY2huaWNhbF9jb250YWN0IiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwg
ImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW10sICJvcmRlciI6
IDF9LCAidGVjaG5pY2FsX25hbWUiOiB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMDAy
LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlRlY2huaWNhbCBOYW1lIiwgImJsYW5r
X29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQi
OiAxOTQsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiZjQ5ZmNjYmMtZTUyYy00YzUwLWIx
MGYtMmM4NTFiMGZlOGY1IiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0Iiwg
InRvb2x0aXAiOiAiIiwgIndpZHRoIjogMjMzLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogInFyYWRhcl9hc3NldF9y
ZXN1bHRzL3RlY2huaWNhbF9uYW1lIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFj
ZWhvbGRlciI6ICIiLCAibmFtZSI6ICJ0ZWNobmljYWxfbmFtZSIsICJkZXByZWNhdGVkIjogZmFs
c2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAib3Jk
ZXIiOiAyfX0sICJwYXJlbnRfdHlwZXMiOiBbImluY2lkZW50Il0sICJ0eXBlX25hbWUiOiAicXJh
ZGFyX2Fzc2V0X3Jlc3VsdHMiLCAiZXhwb3J0X2tleSI6ICJxcmFkYXJfYXNzZXRfcmVzdWx0cyIs
ICJmb3JfY3VzdG9tX2ZpZWxkcyI6IGZhbHNlLCAiYWN0aW9ucyI6IFtdLCAiaWQiOiBudWxsLCAi
Zm9yX2FjdGlvbnMiOiBmYWxzZSwgImZvcl9ub3RpZmljYXRpb25zIjogZmFsc2UsICJzY3JpcHRz
IjogW10sICJwcm9wZXJ0aWVzIjogeyJmb3Jfd2hvIjogW10sICJjYW5fZGVzdHJveSI6IGZhbHNl
LCAiY2FuX2NyZWF0ZSI6IGZhbHNlfX1dLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlk
IjogIjljNmQ4ZDIzLTU3N2QtNDk0Zi1iZTUxLTVkMTc0NDU0NGE1OSIsICJleHBvcnRfa2V5Ijog
InFyYWRhciIsICJuYW1lIjogIlFSYWRhciIsICJkZXN0aW5hdGlvbl90eXBlIjogMCwgInByb2dy
YW1tYXRpY19uYW1lIjogInFyYWRhciIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogWyJn
ZXJhbGQudHJvdG1hbkBpYm0uY29tIl19XSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10s
ICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDAs
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJibGFua19vcHRp
b24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMzcs
ICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVj
YTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogImJvb2xlYW4iLCAidG9v
bHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFy
IGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFkLW9ubHkuIiwgImludGVybmFsIjogZmFsc2Us
ICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNp
ZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgIm5hbWUiOiAi
aW5jX3RyYWluaW5nIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3Nl
cnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQi
OiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJpbmNpZGVudF9pZCIsICJibGFu
a19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlk
IjogMTE1LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogImVhZDIxNGMyLTEzZmUtNDNmNi1h
M2M3LTY3NmE4ODMzOGRiYiIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVy
IiwgInRvb2x0aXAiOiAiIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwg
InRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2luY2lkZW50X2lkIiwg
ImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJp
bmNpZGVudF9pZCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2
ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRl
IjogMTU0NzAzOTI1NDE5MH0=
"""
    )