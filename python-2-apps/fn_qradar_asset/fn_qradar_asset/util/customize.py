# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_qradar_asset"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_qradar_asset package"""
    reload_params = {"package": u"fn_qradar_asset",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"incident_id"], 
                    "datatables": [u"qradar_asset_results"], 
                    "message_destinations": [u"qradar"], 
                    "functions": [u"qradar_asset_query"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_qradar_asset_search"], 
                    "actions": [u"Example: QRadar Query"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     incident_id
    #   DataTables:
    #     qradar_asset_results
    #   Message Destinations:
    #     qradar
    #   Functions:
    #     qradar_asset_query
    #   Workflows:
    #     example_qradar_asset_search
    #   Rules:
    #     Example: QRadar Query


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjJiMTNhZDcyLTM4YmYt
NGIzNi1hZDM2LTZjZjhhMGM3Yzk4NCIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIHdvcmtmbG93IGRl
bW9uc3RyYXRlcyB0aGUgYWJpbGl0eSB0byBydW4gdGhlIFFSYWRhciBmdW5jdGlvbiB3aGljaCBp
ZGVudGlmaWVzIHRlY2huaWNhbCBuYW1lIGFuZCBjb250YWN0IGluZm9ybWF0aW9uIGZyb20gYW4g
YXNzZXQgYW5kIGFkZHMgaXQgdG8gYSBkYXRhIHRhYmxlIGluIHRoZSBpbmNpZGVudC4iLCAib2Jq
ZWN0X3R5cGUiOiAiaW5jaWRlbnQiLCAiZXhwb3J0X2tleSI6ICJleGFtcGxlX3FyYWRhcl9hc3Nl
dF9zZWFyY2giLCAid29ya2Zsb3dfaWQiOiAxNTQsICJsYXN0X21vZGlmaWVkX2J5IjogImdlcmFs
ZC50cm90bWFuQGlibS5jb20iLCAiY29udGVudCI6IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIx
LjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZpbml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cu
b21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9ERUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8v
d3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQ1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3
dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElcIiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8v
cmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5zOnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hl
bWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rl
c3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfcXJhZGFyX2Fzc2V0X3NlYXJjaFwiIGlzRXhlY3V0
YWJsZT1cInRydWVcIiBuYW1lPVwiRXhhbXBsZTogUVJhZGFyIEFzc2V0IFNlYXJjaFwiPjxkb2N1
bWVudGF0aW9uPlRoaXMgd29ya2Zsb3cgZGVtb25zdHJhdGVzIHRoZSBhYmlsaXR5IHRvIHJ1biB0
aGUgUVJhZGFyIGZ1bmN0aW9uIHdoaWNoIGlkZW50aWZpZXMgdGVjaG5pY2FsIG5hbWUgYW5kIGNv
bnRhY3QgaW5mb3JtYXRpb24gZnJvbSBhbiBhc3NldCBhbmQgYWRkcyBpdCB0byBhIGRhdGEgdGFi
bGUgaW4gdGhlIGluY2lkZW50LjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0
RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMHV4ZTRnYzwvb3V0Z29pbmc+
PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzBzMDEwdzdcIiBuYW1l
PVwiUVJhZGFyIEFzc2V0IFF1ZXJ5XCIgcmVzaWxpZW50OnR5cGU9XCJmdW5jdGlvblwiPjxleHRl
bnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9uIHV1aWQ9XCI5ZjdlMzFmNS04ZTEyLTRh
MzQtOWVhYi01OTg4MmEyN2M5YWJcIj57XCJpbnB1dHNcIjp7fSxcInBvc3RfcHJvY2Vzc2luZ19z
Y3JpcHRcIjpcImFzc2V0X3Jlc3VsdHMgPSByZXN1bHRzLnZhbHVlXFxuXFxuZm9yIGFzc2V0X3Jl
c3VsdCBpbiBhc3NldF9yZXN1bHRzOlxcbiAgcm93ID0gaW5jaWRlbnQuYWRkUm93KFxcXCJxcmFk
YXJfYXNzZXRfcmVzdWx0c1xcXCIpXFxuICByb3cuYXNzZXRfaWQgPSBhc3NldF9yZXN1bHRbJ2Fz
c2V0X2lkJ11cXG4gIHJvdy50ZWNobmljYWxfY29udGFjdCA9IGFzc2V0X3Jlc3VsdFsnYXNzZXRf
dGVjaG5pY2FsX2NvbnRhY3QnXVxcbiAgcm93LnRlY2huaWNhbF9uYW1lID0gYXNzZXRfcmVzdWx0
Wydhc3NldF90ZWNobmljYWxfbmFtZSddXCIsXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImlu
cHV0cy5pbmNpZGVudF9pZCA9IGluY2lkZW50LmlkXCJ9PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9l
eHRlbnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzB1eGU0Z2M8L2luY29taW5n
PjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMGo4NWI4MTwvb3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48
c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzB1eGU0Z2NcIiBzb3VyY2VSZWY9XCJTdGFy
dEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18wczAxMHc3XCIvPjxlbmRF
dmVudCBpZD1cIkVuZEV2ZW50XzE0N2x5bDhcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzBqODVi
ODE8L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18w
ajg1YjgxXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMHMwMTB3N1wiIHRhcmdldFJlZj1cIkVu
ZEV2ZW50XzE0N2x5bDhcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4
eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0
aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJT
dGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIv
PjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1u
ZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwi
PjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9
XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lk
dGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpC
b3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2Jw
bW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5F
bGVtZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4
eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5
OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVs
ZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2Rp
XCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1c
IjIyMFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVt
ZW50PVwiU2VydmljZVRhc2tfMHMwMTB3N1wiIGlkPVwiU2VydmljZVRhc2tfMHMwMTB3N19kaVwi
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCI0ODlcIiB5PVwi
MTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwi
U2VxdWVuY2VGbG93XzB1eGU0Z2NcIiBpZD1cIlNlcXVlbmNlRmxvd18wdXhlNGdjX2RpXCI+PG9t
Z2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwi
Lz48b21nZGk6d2F5cG9pbnQgeD1cIjQ4OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0
aD1cIjBcIiB4PVwiMzQzLjVcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5k
aTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFwZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50XzE0N2x5
bDhcIiBpZD1cIkVuZEV2ZW50XzE0N2x5bDhfZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2
XCIgd2lkdGg9XCIzNlwiIHg9XCI3OTFcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiODA5XCIgeT1cIjIyN1wi
Lz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2Ug
YnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMGo4NWI4MVwiIGlkPVwiU2VxdWVuY2VGbG93XzBq
ODViODFfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjU4OVwiIHhzaTp0eXBlPVwib21nZGM6UG9p
bnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNzkxXCIgeHNpOnR5cGU9XCJvbWdk
YzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWln
aHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI2OTBcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQTU5M
YWJlbD48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBNTkRp
YWdyYW0+PC9kZWZpbml0aW9ucz4iLCAid29ya2Zsb3dfaWQiOiAiZXhhbXBsZV9xcmFkYXJfYXNz
ZXRfc2VhcmNoIiwgInZlcnNpb24iOiA3fSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDcwNDI3
OTI4NzIsICJjcmVhdG9yX2lkIjogImdlcmFsZC50cm90bWFuQGlibS5jb20iLCAiYWN0aW9ucyI6
IFtdLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9xcmFkYXJfYXNzZXRfc2VhcmNoIiwg
Im5hbWUiOiAiRXhhbXBsZTogUVJhZGFyIEFzc2V0IFNlYXJjaCJ9XSwgImFjdGlvbnMiOiBbeyJs
b2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkV4YW1wbGU6IFFSYWRhciBRdWVyeSIsICJ2aWV3
X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6IFsiZXhhbXBsZV9xcmFkYXJfYXNz
ZXRfc2VhcmNoIl0sICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJ0aW1lb3V0X3NlY29uZHMi
OiA4NjQwMCwgInV1aWQiOiAiMzg3ZWMzN2ItOTExMS00MzhhLThjYzAtNDUyMWNjODNmMTAzIiwg
ImF1dG9tYXRpb25zIjogW10sICJleHBvcnRfa2V5IjogIkV4YW1wbGU6IFFSYWRhciBRdWVyeSIs
ICJjb25kaXRpb25zIjogW10sICJpZCI6IDE2OSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW119
XSwgImxheW91dHMiOiBbXSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJpZCI6IDU3LCAi
aW5kdXN0cmllcyI6IG51bGwsICJwaGFzZXMiOiBbXSwgImFjdGlvbl9vcmRlciI6IFtdLCAiZ2Vv
cyI6IG51bGwsICJsb2NhbGUiOiBudWxsLCAic2VydmVyX3ZlcnNpb24iOiB7Im1ham9yIjogMzIs
ICJ2ZXJzaW9uIjogIjMyLjAuNDUwMiIsICJidWlsZF9udW1iZXIiOiA0NTAyLCAibWlub3IiOiAw
fSwgInRpbWVmcmFtZXMiOiBudWxsLCAid29ya3NwYWNlcyI6IFtdLCAiYXV0b21hdGljX3Rhc2tz
IjogW10sICJmdW5jdGlvbnMiOiBbeyJkaXNwbGF5X25hbWUiOiAiUVJhZGFyIEFzc2V0IFF1ZXJ5
IiwgImRlc2NyaXB0aW9uIjogeyJjb250ZW50IjogIlRoaXMgZnVuY3Rpb24gaXMgYSBzaW1wbGUg
cXVlcnkgb2YgUVJhZGFyIGFzc2V0IGluZm9ybWF0aW9uLiBUaGlzIGp1c3QgZmluZHMgYWxsIGFz
c2V0cyB0aGF0IGNvbnRhaW5zIHBob25lIG51bWJlcnMgYW5kIGNvbnRhY3QgbmFtZSBhbmQgcmV0
dXJucyB0aGVtIHRvIGEgZGF0YSB0YWJsZS4iLCAiZm9ybWF0IjogInRleHQifSwgImNyZWF0b3Ii
OiB7ImRpc3BsYXlfbmFtZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJ0eXBlIjogInVzZXIiLCAiaWQi
OiA0LCAibmFtZSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIn0sICJ2aWV3X2l0ZW1zIjogW3si
c2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hl
YWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiZWFkMjE0
YzItMTNmZS00M2Y2LWEzYzctNjc2YTg4MzM4ZGJiIiwgInN0ZXBfbGFiZWwiOiBudWxsfV0sICJl
eHBvcnRfa2V5IjogInFyYWRhcl9hc3NldF9xdWVyeSIsICJ1dWlkIjogIjlmN2UzMWY1LThlMTIt
NGEzNC05ZWFiLTU5ODgyYTI3YzlhYiIsICJsYXN0X21vZGlmaWVkX2J5IjogeyJkaXNwbGF5X25h
bWUiOiAiR2VyYWxkIFRyb3RtYW4iLCAidHlwZSI6ICJ1c2VyIiwgImlkIjogNCwgIm5hbWUiOiAi
Z2VyYWxkLnRyb3RtYW5AaWJtLmNvbSJ9LCAidmVyc2lvbiI6IDQsICJ3b3JrZmxvd3MiOiBbeyJk
ZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlwZSI6ICJpbmNpZGVudCIsICJhY3Rpb25zIjog
W10sICJuYW1lIjogIkV4YW1wbGU6IFFSYWRhciBBc3NldCBTZWFyY2giLCAid29ya2Zsb3dfaWQi
OiAxNTQsICJwcm9ncmFtbWF0aWNfbmFtZSI6ICJleGFtcGxlX3FyYWRhcl9hc3NldF9zZWFyY2gi
LCAidXVpZCI6IG51bGx9XSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NDcwNDIxMjgyOTAsICJk
ZXN0aW5hdGlvbl9oYW5kbGUiOiAicXJhZGFyIiwgImlkIjogMTcyLCAibmFtZSI6ICJxcmFkYXJf
YXNzZXRfcXVlcnkifV0sICJub3RpZmljYXRpb25zIjogbnVsbCwgInJlZ3VsYXRvcnMiOiBudWxs
LCAiaW5jaWRlbnRfdHlwZXMiOiBbeyJjcmVhdGVfZGF0ZSI6IDE1NDcwNTU2MzA5NjUsICJkZXNj
cmlwdGlvbiI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZXhwb3J0X2tl
eSI6ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiaWQiOiAwLCAibmFtZSI6
ICJDdXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAidXBkYXRlX2RhdGUiOiAxNTQ3
MDU1NjMwOTY1LCAidXVpZCI6ICJiZmVlYzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAi
LCAiZW5hYmxlZCI6IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAi
aGlkZGVuIjogZmFsc2V9XSwgInNjcmlwdHMiOiBbXSwgInR5cGVzIjogW3siZm9yX3dvcmtmbG93
cyI6IGZhbHNlLCAiZGlzcGxheV9uYW1lIjogIlFSYWRhciBBc3NldCBSZXN1bHRzIiwgInV1aWQi
OiAiN2RkMjE0MDEtZGQ2OC00NjE3LTljNmEtYWIxMmVkODc3ODlkIiwgInR5cGVfaWQiOiA4LCAi
ZmllbGRzIjogeyJhc3NldF9pZCI6IHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDEwMDIs
ICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiQXNzZXQgSWQiLCAiYmxhbmtfb3B0aW9u
IjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDE5Miwg
InJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIwZDkwOTYyYy1lMGNhLTQ3ODAtYTc5Mi0xNTgw
ZDE5MWMxYzMiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogInRleHQiLCAidG9vbHRp
cCI6ICIiLCAid2lkdGgiOiAxODMsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFs
c2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAicXJhZGFyX2Fzc2V0X3Jlc3VsdHMv
YXNzZXRfaWQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIs
ICJuYW1lIjogImFzc2V0X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2Vu
X2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW10sICJvcmRlciI6IDB9LCAidGVjaG5pY2Fs
X2NvbnRhY3QiOiB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMDAyLCAib3BlcmF0aW9u
X3Blcm1zIjoge30sICJ0ZXh0IjogIlRlY2huaWNhbCBDb250YWN0IiwgImJsYW5rX29wdGlvbiI6
IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAxOTMsICJy
ZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiMjExNjZiN2EtMmUzNi00MzVlLTg4MmMtYzhmZGEz
ZmQ5M2Q4IiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJ0ZXh0IiwgInRvb2x0aXAi
OiAiIiwgIndpZHRoIjogMjU5LCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNl
LCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogInFyYWRhcl9hc3NldF9yZXN1bHRzL3Rl
Y2huaWNhbF9jb250YWN0IiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRl
ciI6ICIiLCAibmFtZSI6ICJ0ZWNobmljYWxfY29udGFjdCIsICJkZXByZWNhdGVkIjogZmFsc2Us
ICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAib3JkZXIi
OiAxfSwgInRlY2huaWNhbF9uYW1lIjogeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMTAw
MiwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJUZWNobmljYWwgTmFtZSIsICJibGFu
a19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlk
IjogMTk0LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogImY0OWZjY2JjLWU1MmMtNGM1MC1i
MTBmLTJjODUxYjBmZThmNSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIs
ICJ0b29sdGlwIjogIiIsICJ3aWR0aCI6IDIzMywgImludGVybmFsIjogZmFsc2UsICJyaWNoX3Rl
eHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJxcmFkYXJfYXNzZXRf
cmVzdWx0cy90ZWNobmljYWxfbmFtZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxh
Y2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAidGVjaG5pY2FsX25hbWUiLCAiZGVwcmVjYXRlZCI6IGZh
bHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXSwgIm9y
ZGVyIjogMn19LCAicGFyZW50X3R5cGVzIjogWyJpbmNpZGVudCJdLCAidHlwZV9uYW1lIjogInFy
YWRhcl9hc3NldF9yZXN1bHRzIiwgImV4cG9ydF9rZXkiOiAicXJhZGFyX2Fzc2V0X3Jlc3VsdHMi
LCAiZm9yX2N1c3RvbV9maWVsZHMiOiBmYWxzZSwgImFjdGlvbnMiOiBbXSwgImlkIjogbnVsbCwg
ImZvcl9hY3Rpb25zIjogZmFsc2UsICJmb3Jfbm90aWZpY2F0aW9ucyI6IGZhbHNlLCAic2NyaXB0
cyI6IFtdLCAicHJvcGVydGllcyI6IHsiZm9yX3dobyI6IFtdLCAiY2FuX2Rlc3Ryb3kiOiBmYWxz
ZSwgImNhbl9jcmVhdGUiOiBmYWxzZX19XSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sidXVp
ZCI6ICI5YzZkOGQyMy01NzdkLTQ5NGYtYmU1MS01ZDE3NDQ1NDRhNTkiLCAiZXhwb3J0X2tleSI6
ICJxcmFkYXIiLCAibmFtZSI6ICJRUmFkYXIiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJwcm9n
cmFtbWF0aWNfbmFtZSI6ICJxcmFkYXIiLCAiZXhwZWN0X2FjayI6IHRydWUsICJ1c2VycyI6IFsi
Z2VyYWxkLnRyb3RtYW5AaWJtLmNvbSJdfV0sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtd
LCAicm9sZXMiOiBbXSwgImZpZWxkcyI6IFt7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAw
LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAiYmxhbmtfb3B0
aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDM3
LCAicmVhZF9vbmx5IjogdHJ1ZSwgInV1aWQiOiAiYzNmMGUzZWQtMjFlMS00ZDUzLWFmZmItZmU1
Y2EzMzA4Y2NhIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwgInRv
b2x0aXAiOiAiV2hldGhlciB0aGUgaW5jaWRlbnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVndWxh
ciBpbmNpZGVudC4gIFRoaXMgZmllbGQgaXMgcmVhZC1vbmx5LiIsICJpbnRlcm5hbCI6IGZhbHNl
LCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiaW5j
aWRlbnQvaW5jX3RyYWluaW5nIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJuYW1lIjog
ImluY190cmFpbmluZyIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9z
ZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lk
IjogMTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiaW5jaWRlbnRfaWQiLCAiYmxh
bmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJp
ZCI6IDExNSwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICJlYWQyMTRjMi0xM2ZlLTQzZjYt
YTNjNy02NzZhODgzMzhkYmIiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogIm51bWJl
ciIsICJ0b29sdGlwIjogIiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2Us
ICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9pbmNpZGVudF9pZCIs
ICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAi
aW5jaWRlbnRfaWQiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX1dLCAib3ZlcnJpZGVzIjogW10sICJleHBvcnRfZGF0
ZSI6IDE1NDcwNDMyNDY3MTh9
"""
    )