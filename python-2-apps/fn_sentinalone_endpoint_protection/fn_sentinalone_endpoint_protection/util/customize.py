# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_sentinalone_endpoint_protection"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_sentinalone_endpoint_protection package"""
    reload_params = {"package": u"fn_sentinalone_endpoint_protection",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"artifact_value", u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"sentinalone_endpoint_protection"], 
                    "functions": [u"sentinalone_initiate_scan"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_sentinalone_agent_action_initiate_scan"], 
                    "actions": [u"Example: Initiate Scan"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     artifact_value
    #     incident_id
    #   Message Destinations:
    #     sentinalone_endpoint_protection
    #   Functions:
    #     sentinalone_initiate_scan
    #   Workflows:
    #     example_sentinalone_agent_action_initiate_scan
    #   Rules:
    #     Example: Initiate Scan


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjllMDZiYjIzLTM4YzMt
NDk4YS1iMjUzLWM4ZmE5ODBhNjlkYyIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIHdvcmtmbG93IGV4
ZWN1dGVzIGEgZnVuY3Rpb24gdGhhdCBpbml0aWF0ZXMgYSBzY2FuIG9uIGEgaG9zdCBtYWNoaW5l
LiIsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJleHBvcnRfa2V5IjogImV4YW1wbGVfc2Vu
dGluYWxvbmVfYWdlbnRfYWN0aW9uX2luaXRpYXRlX3NjYW4iLCAid29ya2Zsb3dfaWQiOiAxNjcs
ICJsYXN0X21vZGlmaWVkX2J5IjogImdlcmFsZC50cm90bWFuQGlibS5jb20iLCAiY29udGVudCI6
IHsieG1sIjogIjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxkZWZp
bml0aW9ucyB4bWxucz1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvTU9E
RUxcIiB4bWxuczpicG1uZGk9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0
L0RJXCIgeG1sbnM6b21nZGM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9E
Q1wiIHhtbG5zOm9tZ2RpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRElc
IiB4bWxuczpyZXNpbGllbnQ9XCJodHRwOi8vcmVzaWxpZW50LmlibS5jb20vYnBtblwiIHhtbG5z
OnhzZD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hXCIgeG1sbnM6eHNpPVwiaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIiB0YXJnZXROYW1lc3BhY2U9
XCJodHRwOi8vd3d3LmNhbXVuZGEub3JnL3Rlc3RcIj48cHJvY2VzcyBpZD1cImV4YW1wbGVfc2Vu
dGluYWxvbmVfYWdlbnRfYWN0aW9uX2luaXRpYXRlX3NjYW5cIiBpc0V4ZWN1dGFibGU9XCJ0cnVl
XCIgbmFtZT1cIkV4YW1wbGU6IFNlbnRpbmFsT25lIEFnZW50IEFjdGlvbjogSW5pdGlhdGUgU2Nh
blwiPjxkb2N1bWVudGF0aW9uPlRoaXMgd29ya2Zsb3cgZXhlY3V0ZXMgYSBmdW5jdGlvbiB0aGF0
IGluaXRpYXRlcyBhIHNjYW4gb24gYSBob3N0IG1hY2hpbmUuPC9kb2N1bWVudGF0aW9uPjxzdGFy
dEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18x
MHQ1aWRhPC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VUYXNrIGlkPVwiU2VydmljZVRh
c2tfMWtxNmE1aVwiIG5hbWU9XCJTZW50aW5hbE9uZSBJbml0aWF0ZSBTY2FuXCIgcmVzaWxpZW50
OnR5cGU9XCJmdW5jdGlvblwiPjxleHRlbnNpb25FbGVtZW50cz48cmVzaWxpZW50OmZ1bmN0aW9u
IHV1aWQ9XCIxZGJmZmNjZS1hOTg1LTQyM2ItOTA4Yi1kMTYxNDFlOGYzYzVcIj57XCJpbnB1dHNc
Ijp7fSxcInBvc3RfcHJvY2Vzc2luZ19zY3JpcHRcIjpcIiMgdW5jb21tZW50IGlmIHlvdSB3YW50
IHRvIHVzZSB0byBwcmludCBhbmQgZGVidWcgcmVzdWx0c1xcbiMgYW5kIHdyaXRlIHRoZW0gYmFj
ayB0byB0aGUgbm90ZXMgZmllbGQgb2YgdGhlIGluY2lkZW50LlxcbiMgaW5jaWRlbnQuYWRkTm90
ZShzdHIocmVzdWx0cy52YWx1ZSkpXCIsXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImlucHV0
cy5pbmNpZGVudF9pZCA9IGluY2lkZW50LmlkXFxuaW5wdXRzLmFydGlmYWN0X3ZhbHVlID0gYXJ0
aWZhY3QudmFsdWVcIixcInJlc3VsdF9uYW1lXCI6XCJcIn08L3Jlc2lsaWVudDpmdW5jdGlvbj48
L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMTB0NWlkYTwvaW5jb21p
bmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18xeWk1cDFhPC9vdXRnb2luZz48L3NlcnZpY2VUYXNr
PjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMTB0NWlkYVwiIHNvdXJjZVJlZj1cIlN0
YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNrXzFrcTZhNWlcIi8+PGVu
ZEV2ZW50IGlkPVwiRW5kRXZlbnRfMGkwaHg3OFwiPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3dfMXlp
NXAxYTwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93
XzF5aTVwMWFcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18xa3E2YTVpXCIgdGFyZ2V0UmVmPVwi
RW5kRXZlbnRfMGkwaHg3OFwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJUZXh0QW5ub3RhdGlvbl8x
a3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90ZXh0PjwvdGV4dEFubm90
YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0OFwiIHNvdXJjZVJlZj1c
IlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5vdGF0aW9uXzFreHhpeXRc
Ii8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1ORGlhZ3JhbV8xXCI+PGJw
bW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBpZD1cIkJQTU5QbGFuZV8x
XCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiBp
ZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3
aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdcIiB5PVwiMjIzXCIvPjwv
YnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1OU2hhcGUgYnBt
bkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJUZXh0QW5ub3RhdGlvbl8x
a3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdpZHRoPVwiMTAwXCIgeD1c
Ijk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRnZSBicG1u
RWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhf
ZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5
PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5cGU9XCJvbWdkYzpQb2lu
dFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVs
ZW1lbnQ9XCJTZXJ2aWNlVGFza18xa3E2YTVpXCIgaWQ9XCJTZXJ2aWNlVGFza18xa3E2YTVpX2Rp
XCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAwXCIgeD1cIjM5Mi4yMzM0
NTU4ODIzNTI5XCIgeT1cIjE2NlwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5kaTpCUE1ORWRn
ZSBicG1uRWxlbWVudD1cIlNlcXVlbmNlRmxvd18xMHQ1aWRhXCIgaWQ9XCJTZXF1ZW5jZUZsb3df
MTB0NWlkYV9kaVwiPjxvbWdkaTp3YXlwb2ludCB4PVwiMTk4XCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyMDZcIi8+PG9tZ2RpOndheXBvaW50IHg9XCIzOTJcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjIwNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjI5NVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBN
TkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwi
RW5kRXZlbnRfMGkwaHg3OFwiIGlkPVwiRW5kRXZlbnRfMGkwaHg3OF9kaVwiPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjY2OS4yMzM0NTU4ODIzNTI5XCIgeT1c
IjE4Ny43NTI3NTczNTI5NDExNlwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjY4Ny4yMzM0NTU4ODIzNTI5XCIgeT1cIjIyNi43
NTI3NTczNTI5NDExNlwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMXlpNXAxYVwiIGlkPVwi
U2VxdWVuY2VGbG93XzF5aTVwMWFfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjQ5MlwiIHhzaTp0
eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNjY5XCIg
eHNpOnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9t
Z2RjOkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI1ODAuNVwiIHk9XCIxODQu
NVwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBs
YW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5pdGlvbnM+IiwgIndvcmtmbG93X2lkIjog
ImV4YW1wbGVfc2VudGluYWxvbmVfYWdlbnRfYWN0aW9uX2luaXRpYXRlX3NjYW4iLCAidmVyc2lv
biI6IDN9LCAibGFzdF9tb2RpZmllZF90aW1lIjogMTU1NTg5NDAwMjc4NiwgImNyZWF0b3JfaWQi
OiAiZ2VyYWxkLnRyb3RtYW5AaWJtLmNvbSIsICJhY3Rpb25zIjogW10sICJwcm9ncmFtbWF0aWNf
bmFtZSI6ICJleGFtcGxlX3NlbnRpbmFsb25lX2FnZW50X2FjdGlvbl9pbml0aWF0ZV9zY2FuIiwg
Im5hbWUiOiAiRXhhbXBsZTogU2VudGluYWxPbmUgQWdlbnQgQWN0aW9uOiBJbml0aWF0ZSBTY2Fu
In1dLCAiYWN0aW9ucyI6IFt7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiRXhhbXBsZTog
SW5pdGlhdGUgU2NhbiIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtmbG93cyI6
IFsiZXhhbXBsZV9zZW50aW5hbG9uZV9hZ2VudF9hY3Rpb25faW5pdGlhdGVfc2NhbiJdLCAib2Jq
ZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjog
ImY4MDQ0NzkwLTcwMDYtNDU1Zi1iZWE3LTRiMTFkMjhlOTljYyIsICJhdXRvbWF0aW9ucyI6IFtd
LCAiZXhwb3J0X2tleSI6ICJFeGFtcGxlOiBJbml0aWF0ZSBTY2FuIiwgImNvbmRpdGlvbnMiOiBb
XSwgImlkIjogMTg0LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXX1dLCAibGF5b3V0cyI6IFtd
LCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImlkIjogNzAsICJpbmR1c3RyaWVzIjogbnVs
bCwgInBoYXNlcyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJnZW9zIjogbnVsbCwgImxvY2Fs
ZSI6IG51bGwsICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMiwgInZlcnNpb24iOiAiMzIu
MC40NTAyIiwgImJ1aWxkX251bWJlciI6IDQ1MDIsICJtaW5vciI6IDB9LCAidGltZWZyYW1lcyI6
IG51bGwsICJ3b3Jrc3BhY2VzIjogW10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgImZ1bmN0aW9u
cyI6IFt7ImRpc3BsYXlfbmFtZSI6ICJTZW50aW5hbE9uZSBJbml0aWF0ZSBTY2FuIiwgImRlc2Ny
aXB0aW9uIjogeyJjb250ZW50IjogIlRoaXMgZnVuY3Rpb24gdGFrZXMgaW4gYW4gYXJ0aWZhY3Qg
b2YgdHlwZSBJUCB0byBiZSBwYXNzZWQgaW4gYXMgYSBmaWx0ZXIgb2JqZWN0IHZhbHVlLiBUaGUg
ZmlsdGVyIG9iamVjdCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIGhvc3QgbWFjaGluZShzKSBh
bmQgdGhlbiBleGVjdXRlcyB0aGUgc2Nhbi4iLCAiZm9ybWF0IjogInRleHQifSwgImNyZWF0b3Ii
OiB7ImRpc3BsYXlfbmFtZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJ0eXBlIjogInVzZXIiLCAiaWQi
OiA0LCAibmFtZSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIn0sICJ2aWV3X2l0ZW1zIjogW3si
c2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hl
YWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiZWFkMjE0
YzItMTNmZS00M2Y2LWEzYzctNjc2YTg4MzM4ZGJiIiwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJz
aG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVh
ZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICI5YmE0OTg4
Ny0wZGNmLTQwY2UtYTVlYS05YzBjNDNmODMxYmYiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4
cG9ydF9rZXkiOiAic2VudGluYWxvbmVfaW5pdGlhdGVfc2NhbiIsICJ1dWlkIjogIjFkYmZmY2Nl
LWE5ODUtNDIzYi05MDhiLWQxNjE0MWU4ZjNjNSIsICJsYXN0X21vZGlmaWVkX2J5IjogeyJkaXNw
bGF5X25hbWUiOiAiR2VyYWxkIFRyb3RtYW4iLCAidHlwZSI6ICJ1c2VyIiwgImlkIjogNCwgIm5h
bWUiOiAiZ2VyYWxkLnRyb3RtYW5AaWJtLmNvbSJ9LCAidmVyc2lvbiI6IDEsICJ3b3JrZmxvd3Mi
OiBbeyJkZXNjcmlwdGlvbiI6IG51bGwsICJvYmplY3RfdHlwZSI6ICJhcnRpZmFjdCIsICJhY3Rp
b25zIjogW10sICJuYW1lIjogIkV4YW1wbGU6IFNlbnRpbmFsT25lIEFnZW50IEFjdGlvbjogSW5p
dGlhdGUgU2NhbiIsICJ3b3JrZmxvd19pZCI6IDE2NywgInByb2dyYW1tYXRpY19uYW1lIjogImV4
YW1wbGVfc2VudGluYWxvbmVfYWdlbnRfYWN0aW9uX2luaXRpYXRlX3NjYW4iLCAidXVpZCI6IG51
bGx9XSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTU4OTI1MjA4MzIsICJkZXN0aW5hdGlvbl9o
YW5kbGUiOiAic2VudGluYWxvbmVfZW5kcG9pbnRfcHJvdGVjdGlvbiIsICJpZCI6IDE4MiwgIm5h
bWUiOiAic2VudGluYWxvbmVfaW5pdGlhdGVfc2NhbiJ9XSwgIm5vdGlmaWNhdGlvbnMiOiBudWxs
LCAicmVndWxhdG9ycyI6IG51bGwsICJpbmNpZGVudF90eXBlcyI6IFt7ImNyZWF0ZV9kYXRlIjog
MTU1NTkyNDE4OTIxMiwgImRlc2NyaXB0aW9uIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGlu
dGVybmFsKSIsICJleHBvcnRfa2V5IjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFs
KSIsICJpZCI6IDAsICJuYW1lIjogIkN1c3RvbWl6YXRpb24gUGFja2FnZXMgKGludGVybmFsKSIs
ICJ1cGRhdGVfZGF0ZSI6IDE1NTU5MjQxODkyMTIsICJ1dWlkIjogImJmZWVjMmQ0LTM3NzAtMTFl
OC1hZDM5LTRhMDAwNDA0NGFhMCIsICJlbmFibGVkIjogZmFsc2UsICJzeXN0ZW0iOiBmYWxzZSwg
InBhcmVudF9pZCI6IG51bGwsICJoaWRkZW4iOiBmYWxzZX1dLCAic2NyaXB0cyI6IFtdLCAidHlw
ZXMiOiBbXSwgIm1lc3NhZ2VfZGVzdGluYXRpb25zIjogW3sidXVpZCI6ICJkM2QyNGQ1Ni03ZDM0
LTQ5YzgtYjBlMy03MDdiNzdkNzk5YmQiLCAiZXhwb3J0X2tleSI6ICJzZW50aW5hbG9uZV9lbmRw
b2ludF9wcm90ZWN0aW9uIiwgIm5hbWUiOiAiU2VudGluYWxPbmUgRW5kcG9pbnQgUHJvdGVjdGlv
biIsICJkZXN0aW5hdGlvbl90eXBlIjogMCwgInByb2dyYW1tYXRpY19uYW1lIjogInNlbnRpbmFs
b25lX2VuZHBvaW50X3Byb3RlY3Rpb24iLCAiZXhwZWN0X2FjayI6IHRydWUsICJ1c2VycyI6IFtd
fV0sICJpbmNpZGVudF9hcnRpZmFjdF90eXBlcyI6IFtdLCAicm9sZXMiOiBbXSwgImZpZWxkcyI6
IFt7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30s
ICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBu
dWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDM3LCAicmVhZF9vbmx5IjogdHJ1ZSwgInV1
aWQiOiAiYzNmMGUzZWQtMjFlMS00ZDUzLWFmZmItZmU1Y2EzMzA4Y2NhIiwgImNob3NlbiI6IGZh
bHNlLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwgInRvb2x0aXAiOiAiV2hldGhlciB0aGUgaW5j
aWRlbnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVndWxhciBpbmNpZGVudC4gIFRoaXMgZmllbGQg
aXMgcmVhZC1vbmx5LiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0
ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvaW5jX3RyYWluaW5nIiwgImhp
ZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJuYW1lIjogImluY190cmFpbmluZyIsICJkZXByZWNh
dGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6
IFtdfSwgeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjogMTEsICJvcGVyYXRpb25fcGVybXMi
OiB7fSwgInRleHQiOiAiYXJ0aWZhY3RfdmFsdWUiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJw
cmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6IDE0OSwgInJlYWRfb25seSI6
IGZhbHNlLCAidXVpZCI6ICI5YmE0OTg4Ny0wZGNmLTQwY2UtYTVlYS05YzBjNDNmODMxYmYiLCAi
Y2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogInRleHQiLCAidG9vbHRpcCI6ICIiLCAiaW50
ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBv
cnRfa2V5IjogIl9fZnVuY3Rpb24vYXJ0aWZhY3RfdmFsdWUiLCAiaGlkZV9ub3RpZmljYXRpb24i
OiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJuYW1lIjogImFydGlmYWN0X3ZhbHVlIiwgImRl
cHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFs
dWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9w
ZXJtcyI6IHt9LCAidGV4dCI6ICJpbmNpZGVudF9pZCIsICJibGFua19vcHRpb24iOiBmYWxzZSwg
InByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMTE1LCAicmVhZF9vbmx5
IjogZmFsc2UsICJ1dWlkIjogImVhZDIxNGMyLTEzZmUtNDNmNi1hM2M3LTY3NmE4ODMzOGRiYiIs
ICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgInRvb2x0aXAiOiAiIiwg
ImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAi
ZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2luY2lkZW50X2lkIiwgImhpZGVfbm90aWZpY2F0aW9u
IjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJpbmNpZGVudF9pZCIsICJkZXBy
ZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVl
cyI6IFtdfV0sICJvdmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjogMTU1NTg5NDE3OTUwNn0=
"""
    )