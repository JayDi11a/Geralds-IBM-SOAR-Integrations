# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_malwarebytes_interpreter"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_malwarebytes_interpreter package"""
    reload_params = {"package": u"fn_malwarebytes_interpreter",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"artifact_id", u"attachment_id", u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"malwarebytes"], 
                    "functions": [u"malware_results"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_malwarebytes_enrichment"], 
                    "actions": [u"Example: Run Malwarebytes Interpreter"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     artifact_id
    #     attachment_id
    #     incident_id
    #   Message Destinations:
    #     malwarebytes
    #   Functions:
    #     malware_results
    #   Workflows:
    #     example_malwarebytes_enrichment
    #   Rules:
    #     Example: Run Malwarebytes Interpreter


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogImViYzljY2IzLTc5ZDgt
NGRkZC1iOTRmLWIyMWRmNTEyZDgzNiIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIGZ1bmN0aW9uIGNh
bGxzIHRoZSBtYWx3YXJlYnl0ZXMgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgcmVzdWx0cyBhbmQg
YWRkcyB0aGVtIHRvIHRoZSBcIk1hbHdhcmVieXRlcyBTeXN0ZW0gSW5mb1wiIGRhdGEgdGFibGUg
YW5kL29yIFwiTWFsd2FyZWJ5dGVzIEZpbGUgSW5mb1wiIGRhdGEgdGFibGUgZGVwZW5kaW5nIG9u
IHRoZSB0eXBlIG9mIHNjYW4uIiwgIm9iamVjdF90eXBlIjogImF0dGFjaG1lbnQiLCAiZXhwb3J0
X2tleSI6ICJleGFtcGxlX21hbHdhcmVieXRlc19lbnJpY2htZW50IiwgIndvcmtmbG93X2lkIjog
MTgzLCAibGFzdF9tb2RpZmllZF9ieSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIiwgImNvbnRl
bnQiOiB7InhtbCI6ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48
ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0
L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEw
MDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1
MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0
L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDovL3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4
bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1c
Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNw
YWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9XCJleGFtcGxl
X21hbHdhcmVieXRlc19lbnJpY2htZW50XCIgaXNFeGVjdXRhYmxlPVwidHJ1ZVwiIG5hbWU9XCJF
eGFtcGxlOiBNYWx3YXJlYnl0ZXMgRW5yaWNobWVudFwiPjxkb2N1bWVudGF0aW9uPjwhW0NEQVRB
W1RoaXMgZnVuY3Rpb24gY2FsbHMgdGhlIG1hbHdhcmVieXRlcyBmdW5jdGlvbiB0aGF0IHRha2Vz
IHRoZSByZXN1bHRzIGFuZCBhZGRzIHRoZW0gdG8gdGhlIFwiTWFsd2FyZWJ5dGVzIFN5c3RlbSBJ
bmZvXCIgZGF0YSB0YWJsZSBhbmQvb3IgXCJNYWx3YXJlYnl0ZXMgRmlsZSBJbmZvXCIgZGF0YSB0
YWJsZSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2Ygc2Nhbi5dXT48L2RvY3VtZW50YXRpb24+PHN0
YXJ0RXZlbnQgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1cIj48b3V0Z29pbmc+U2VxdWVuY2VGbG93
XzExcmFkYjY8L291dGdvaW5nPjwvc3RhcnRFdmVudD48c2VydmljZVRhc2sgaWQ9XCJTZXJ2aWNl
VGFza18xY21oamRmXCIgbmFtZT1cIk1hbHdhcmUgUmVzdWx0c1wiIHJlc2lsaWVudDp0eXBlPVwi
ZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVudHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwi
MjIxOWYyMWYtZDgwOS00NTc3LTllMGYtMThkNTk5MjMwODA0XCI+e1wiaW5wdXRzXCI6e30sXCJw
b3N0X3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpZiByZXN1bHRzLnN1Y2Nlc3M6XFxuICByb3cgPSBp
bmNpZGVudC5hZGRSb3coXFxcIm1hbHdhcmVieXRlc19zeXN0ZW1faW5mb3JtYXRpb25cXFwiKVxc
biAgcm93LnN5c3RlbV9vcyA9IHJlc3VsdHMuc3lzdGVtX3Jlc3VsdHNbJ21hY2hpbmVfb3MnXVxc
biAgcm93LnVzZXJfcnVubmluZ19zY2FuID0gcmVzdWx0cy5zeXN0ZW1fcmVzdWx0c1snc2Nhbl91
c2VyJ11cXG4gIHJvdy5zY2FuX3Jhbl9hcyA9IHJlc3VsdHMuc3lzdGVtX3Jlc3VsdHNbJ3NjYW5f
YXNfYWRtaW4nXVxcbiAgcm93LnNjYW5fZGF0ZSA9IHJlc3VsdHMuc3lzdGVtX3Jlc3VsdHNbJ3Nj
YW5fZGF0ZSddXFxuICByb3cubWFsd2FyZWJ5dGVzX3ZlcnNpb24gPSByZXN1bHRzLnN5c3RlbV9y
ZXN1bHRzWydtYWx3YXJlYnl0ZXNfdmVyc2lvbiddXFxuICByb3cud2FzX3NjYW5fc3VjY2Vzc2Z1
bCA9IHJlc3VsdHMuc3lzdGVtX3Jlc3VsdHNbJ3NjYW5fc3RhdHVzJ11cXG4gIHJvdy53YXNfcm9v
dGtpdHNfZW5hYmxlZCA9IHJlc3VsdHMuc3lzdGVtX3Jlc3VsdHNbJ3Jvb2tpdF9zdGF0dXMnXVxc
biAgcm93Lml0ZW1zX2ZvdW5kID0gcmVzdWx0cy5zeXN0ZW1fcmVzdWx0c1snaXRlbXNfZm91bmQn
XVxcbmVsc2U6XFxuICByb3cgPSBpbmNpZGVudC5hZGRSb3coXFxcIm1hbHdhcmVieXRlc19zeXN0
ZW1faW5mb3JtYXRpb25cXFwiKVxcbiAgcm93LnN5c3RlbV9vcyA9IHJlc3VsdHMuc3lzdGVtX3Jl
c3VsdHNbJ21hY2hpbmVfb3MnXVxcbiAgcm93LnVzZXJfcnVubmluZ19zY2FuID0gcmVzdWx0cy5z
eXN0ZW1fcmVzdWx0c1snc2Nhbl91c2VyJ11cXG4gIHJvdy5zY2FuX3Jhbl9hcyA9IHJlc3VsdHMu
c3lzdGVtX3Jlc3VsdHNbJ3NjYW5fYXNfYWRtaW4nXVxcbiAgcm93LnNjYW5fZGF0ZSA9IHJlc3Vs
dHMuc3lzdGVtX3Jlc3VsdHNbJ3NjYW5fZGF0ZSddXFxuICByb3cubWFsd2FyZWJ5dGVzX3ZlcnNp
b24gPSByZXN1bHRzLnN5c3RlbV9yZXN1bHRzWydtYWx3YXJlYnl0ZXNfdmVyc2lvbiddXFxuICBy
b3cud2FzX3NjYW5fc3VjY2Vzc2Z1bCA9IHJlc3VsdHMuc3lzdGVtX3Jlc3VsdHNbJ3NjYW5fc3Rh
dHVzJ11cXG4gIHJvdy53YXNfcm9vdGtpdHNfZW5hYmxlZCA9IHJlc3VsdHMuc3lzdGVtX3Jlc3Vs
dHNbJ3Jvb2tpdF9zdGF0dXMnXVxcbiAgcm93Lml0ZW1zX2ZvdW5kID0gcmVzdWx0cy5zeXN0ZW1f
cmVzdWx0c1snaXRlbXNfZm91bmQnXVxcbiAgXFxuICBmb3IgZmlsZV9pdGVtIGluIHJlc3VsdHMu
ZmlsZV9yZXN1bHRzOlxcbiAgICByb3cgPSBpbmNpZGVudC5hZGRSb3coXFxcIm1hbHdhcmVieXRl
c19maWxlX2l0ZW1zXFxcIilcXG4gICAgcm93LnBhdGggPSBmaWxlX2l0ZW1bJ3BhdGgnXVxcbiAg
ICByb3cudmVuZG9yID0gZmlsZV9pdGVtWyd2ZW5kb3InXVxcbiAgICByb3cuYWN0aW9uX3Jlc3Vs
dCA9IGZpbGVfaXRlbVsnYWN0aW9uJ11cXG4gICAgcm93Lmhhc2hfcmVzdWx0ID0gZmlsZV9pdGVt
WydoYXNoJ11cXG4gIFxcbmluY2lkZW50LmFkZE5vdGUoc3RyKHJlc3VsdHMuc3VjY2VzcykpXCIs
XCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImlucHV0cy5hdHRhY2htZW50X2lkID0gYXR0YWNo
bWVudC5pZFxcbmlucHV0cy5pbmNpZGVudF9pZCA9IGluY2lkZW50LmlkXCJ9PC9yZXNpbGllbnQ6
ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzExcmFk
YjY8L2luY29taW5nPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMTh2cWdxbTwvb3V0Z29pbmc+PC9z
ZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzExcmFkYjZcIiBzb3Vy
Y2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18xY21o
amRmXCIvPjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50XzE5N3l5ZzVcIj48aW5jb21pbmc+U2VxdWVu
Y2VGbG93XzE4dnFncW08L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNl
cXVlbmNlRmxvd18xOHZxZ3FtXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMWNtaGpkZlwiIHRh
cmdldFJlZj1cIkVuZEV2ZW50XzE5N3l5ZzVcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFu
bm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48
L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBz
b3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlv
bl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdy
YW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJC
UE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8x
NTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxh
YmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1c
IjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBN
TlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFu
bm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1c
IjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBN
TkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlv
bl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2Rj
OlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwi
b21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNo
YXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMWNtaGpkZlwiIGlkPVwiU2VydmljZVRhc2tf
MWNtaGpkZl9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9
XCI0NDYuOTc1NzU3NTc1NzU3NlwiIHk9XCIxNjZcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1u
ZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMTFyYWRiNlwiIGlkPVwiU2Vx
dWVuY2VGbG93XzExcmFkYjZfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE5OFwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNDQ3XCIgeHNp
OnR5cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCIzMjIuNVwiIHk9XCIxODRcIi8+
PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJw
bW5FbGVtZW50PVwiRW5kRXZlbnRfMTk3eXlnNVwiIGlkPVwiRW5kRXZlbnRfMTk3eXlnNV9kaVwi
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjc1Ny45NzU3NTc1
NzU3NTc2XCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdo
dD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjc3NS45NzU3NTc1NzU3NTc2XCIgeT1cIjIyN1wiLz48
L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBt
bkVsZW1lbnQ9XCJTZXF1ZW5jZUZsb3dfMTh2cWdxbVwiIGlkPVwiU2VxdWVuY2VGbG93XzE4dnFn
cW1fZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjU0N1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRc
IiB5PVwiMjA2XCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiNzU4XCIgeHNpOnR5cGU9XCJvbWdkYzpQ
b2ludFwiIHk9XCIyMDZcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9
XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI2NTIuNVwiIHk9XCIxODRcIi8+PC9icG1uZGk6QlBNTkxh
YmVsPjwvYnBtbmRpOkJQTU5FZGdlPjwvYnBtbmRpOkJQTU5QbGFuZT48L2JwbW5kaTpCUE1ORGlh
Z3JhbT48L2RlZmluaXRpb25zPiIsICJ3b3JrZmxvd19pZCI6ICJleGFtcGxlX21hbHdhcmVieXRl
c19lbnJpY2htZW50IiwgInZlcnNpb24iOiAzfSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTkw
NDk4MTUwMzgsICJjcmVhdG9yX2lkIjogImdlcmFsZC50cm90bWFuQGlibS5jb20iLCAiYWN0aW9u
cyI6IFtdLCAicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9tYWx3YXJlYnl0ZXNfZW5yaWNo
bWVudCIsICJuYW1lIjogIkV4YW1wbGU6IE1hbHdhcmVieXRlcyBFbnJpY2htZW50In1dLCAiYWN0
aW9ucyI6IFt7ImxvZ2ljX3R5cGUiOiAiYWxsIiwgIm5hbWUiOiAiRXhhbXBsZTogUnVuIE1hbHdh
cmVieXRlcyBJbnRlcnByZXRlciIsICJ2aWV3X2l0ZW1zIjogW10sICJ0eXBlIjogMSwgIndvcmtm
bG93cyI6IFsiZXhhbXBsZV9tYWx3YXJlYnl0ZXNfZW5yaWNobWVudCJdLCAib2JqZWN0X3R5cGUi
OiAiYXR0YWNobWVudCIsICJ0aW1lb3V0X3NlY29uZHMiOiA4NjQwMCwgInV1aWQiOiAiYWZmODRh
OWItY2NlZC00ZTBhLTk1ZTItMTU3MDc2MjUwMDg2IiwgImF1dG9tYXRpb25zIjogW10sICJleHBv
cnRfa2V5IjogIkV4YW1wbGU6IFJ1biBNYWx3YXJlYnl0ZXMgSW50ZXJwcmV0ZXIiLCAiY29uZGl0
aW9ucyI6IFtdLCAiaWQiOiAxOTksICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6IFtdfV0sICJsYXlv
dXRzIjogW10sICJleHBvcnRfZm9ybWF0X3ZlcnNpb24iOiAyLCAiaWQiOiA4MywgImluZHVzdHJp
ZXMiOiBudWxsLCAicGhhc2VzIjogW10sICJhY3Rpb25fb3JkZXIiOiBbXSwgImdlb3MiOiBudWxs
LCAibG9jYWxlIjogbnVsbCwgInNlcnZlcl92ZXJzaW9uIjogeyJtYWpvciI6IDMyLCAidmVyc2lv
biI6ICIzMi4wLjQ1MDIiLCAiYnVpbGRfbnVtYmVyIjogNDUwMiwgIm1pbm9yIjogMH0sICJ0aW1l
ZnJhbWVzIjogbnVsbCwgIndvcmtzcGFjZXMiOiBbXSwgImF1dG9tYXRpY190YXNrcyI6IFtdLCAi
ZnVuY3Rpb25zIjogW3siZGlzcGxheV9uYW1lIjogIk1hbHdhcmUgUmVzdWx0cyIsICJkZXNjcmlw
dGlvbiI6IHsiY29udGVudCI6ICJUaGlzIGZ1bmN0aW9uIHRha2VzIHRoZSAueG1sIGZpbGUgcmVz
dWx0cyBmcm9tIE1hbHdhcmVieXRlcyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0cyB0byBhIGRhdGEg
dGFibGUuIiwgImZvcm1hdCI6ICJ0ZXh0In0sICJjcmVhdG9yIjogeyJkaXNwbGF5X25hbWUiOiAi
R2VyYWxkIFRyb3RtYW4iLCAidHlwZSI6ICJ1c2VyIiwgImlkIjogNCwgIm5hbWUiOiAiZ2VyYWxk
LnRyb3RtYW5AaWJtLmNvbSJ9LCAidmlld19pdGVtcyI6IFt7InNob3dfaWYiOiBudWxsLCAiZmll
bGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfbGlua19oZWFkZXIiOiBmYWxzZSwgImVsZW1l
bnQiOiAiZmllbGRfdXVpZCIsICJjb250ZW50IjogImVhZDIxNGMyLTEzZmUtNDNmNi1hM2M3LTY3
NmE4ODMzOGRiYiIsICJzdGVwX2xhYmVsIjogbnVsbH0sIHsic2hvd19pZiI6IG51bGwsICJmaWVs
ZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hlYWRlciI6IGZhbHNlLCAiZWxlbWVu
dCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiMTY3NzcxNmEtYTk1ZS00ZjU1LThlM2UtNTM5
OWU2ZDNiZDk2IiwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJzaG93X2lmIjogbnVsbCwgImZpZWxk
X3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50
IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICI1ZTk0YjFkMy00OGExLTQxOGEtOWNlMy00NDMz
YzY4ODllMTQiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAibWFsd2FyZV9y
ZXN1bHRzIiwgInV1aWQiOiAiMjIxOWYyMWYtZDgwOS00NTc3LTllMGYtMThkNTk5MjMwODA0Iiwg
Imxhc3RfbW9kaWZpZWRfYnkiOiB7ImRpc3BsYXlfbmFtZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJ0
eXBlIjogInVzZXIiLCAiaWQiOiA0LCAibmFtZSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIn0s
ICJ2ZXJzaW9uIjogMSwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0aW9uIjogbnVsbCwgIm9iamVj
dF90eXBlIjogImF0dGFjaG1lbnQiLCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlOiBN
YWx3YXJlYnl0ZXMgRW5yaWNobWVudCIsICJ3b3JrZmxvd19pZCI6IDE4MywgInByb2dyYW1tYXRp
Y19uYW1lIjogImV4YW1wbGVfbWFsd2FyZWJ5dGVzX2VucmljaG1lbnQiLCAidXVpZCI6IG51bGx9
XSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTkwNDk1MDMwMjIsICJkZXN0aW5hdGlvbl9oYW5k
bGUiOiAibWFsd2FyZWJ5dGVzIiwgImlkIjogMTk5LCAibmFtZSI6ICJtYWx3YXJlX3Jlc3VsdHMi
fV0sICJub3RpZmljYXRpb25zIjogbnVsbCwgInJlZ3VsYXRvcnMiOiBudWxsLCAiaW5jaWRlbnRf
dHlwZXMiOiBbeyJjcmVhdGVfZGF0ZSI6IDE1NTkwNzk1NzYxMDIsICJkZXNjcmlwdGlvbiI6ICJD
dXN0b21pemF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiZXhwb3J0X2tleSI6ICJDdXN0b21p
emF0aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAiaWQiOiAwLCAibmFtZSI6ICJDdXN0b21pemF0
aW9uIFBhY2thZ2VzIChpbnRlcm5hbCkiLCAidXBkYXRlX2RhdGUiOiAxNTU5MDc5NTc2MTAyLCAi
dXVpZCI6ICJiZmVlYzJkNC0zNzcwLTExZTgtYWQzOS00YTAwMDQwNDRhYTAiLCAiZW5hYmxlZCI6
IGZhbHNlLCAic3lzdGVtIjogZmFsc2UsICJwYXJlbnRfaWQiOiBudWxsLCAiaGlkZGVuIjogZmFs
c2V9XSwgInNjcmlwdHMiOiBbXSwgInR5cGVzIjogW10sICJtZXNzYWdlX2Rlc3RpbmF0aW9ucyI6
IFt7InV1aWQiOiAiZjlkODY1NjQtYWY1Ni00YmVkLTk1ZWMtMGU2ZmFmYzY3OTNkIiwgImV4cG9y
dF9rZXkiOiAibWFsd2FyZWJ5dGVzIiwgIm5hbWUiOiAiTWFsd2FyZWJ5dGVzIiwgImRlc3RpbmF0
aW9uX3R5cGUiOiAwLCAicHJvZ3JhbW1hdGljX25hbWUiOiAibWFsd2FyZWJ5dGVzIiwgImV4cGVj
dF9hY2siOiB0cnVlLCAidXNlcnMiOiBbXX1dLCAiaW5jaWRlbnRfYXJ0aWZhY3RfdHlwZXMiOiBb
XSwgInJvbGVzIjogW10sICJmaWVsZHMiOiBbeyJvcGVyYXRpb25zIjogW10sICJ0eXBlX2lkIjog
MCwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJTaW11bGF0aW9uIiwgImJsYW5rX29w
dGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAz
NywgInJlYWRfb25seSI6IHRydWUsICJ1dWlkIjogImMzZjBlM2VkLTIxZTEtNGQ1My1hZmZiLWZl
NWNhMzMwOGNjYSIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAiYm9vbGVhbiIsICJ0
b29sdGlwIjogIldoZXRoZXIgdGhlIGluY2lkZW50IGlzIGEgc2ltdWxhdGlvbiBvciBhIHJlZ3Vs
YXIgaW5jaWRlbnQuICBUaGlzIGZpZWxkIGlzIHJlYWQtb25seS4iLCAiaW50ZXJuYWwiOiBmYWxz
ZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogImlu
Y2lkZW50L2luY190cmFpbmluZyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAibmFtZSI6
ICJpbmNfdHJhaW5pbmciLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlf
c2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9p
ZCI6IDExLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogImF0dGFjaG1lbnRfaWQiLCAi
Ymxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUs
ICJpZCI6IDEyMiwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIxNjc3NzE2YS1hOTVlLTRm
NTUtOGUzZS01Mzk5ZTZkM2JkOTYiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogIm51
bWJlciIsICJ0b29sdGlwIjogIiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFs
c2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9hdHRhY2htZW50
X2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFt
ZSI6ICJhdHRhY2htZW50X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2Vu
X2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5
cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJpbmNpZGVudF9pZCIs
ICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1
ZSwgImlkIjogMTE1LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogImVhZDIxNGMyLTEzZmUt
NDNmNi1hM2M3LTY3NmE4ODMzOGRiYiIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAi
bnVtYmVyIiwgInRvb2x0aXAiOiAiIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBm
YWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6ICJfX2Z1bmN0aW9uL2luY2lkZW50
X2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJwbGFjZWhvbGRlciI6ICIiLCAibmFt
ZSI6ICJpbmNpZGVudF9pZCIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0X2Nob3Nlbl9i
eV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfSwgeyJvcGVyYXRpb25zIjogW10sICJ0eXBl
X2lkIjogMTEsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiYXJ0aWZhY3RfaWQiLCAi
Ymxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUs
ICJpZCI6IDI2OSwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICI1ZTk0YjFkMy00OGExLTQx
OGEtOWNlMy00NDMzYzY4ODllMTQiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogIm51
bWJlciIsICJ0b29sdGlwIjogIiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFs
c2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9hcnRpZmFjdF9p
ZCIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUi
OiAiYXJ0aWZhY3RfaWQiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9zZW5fYnlf
c2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX1dLCAib3ZlcnJpZGVzIjogW10sICJleHBvcnRf
ZGF0ZSI6IDE1NTkwNTAxMDE1MzF9
"""
    )