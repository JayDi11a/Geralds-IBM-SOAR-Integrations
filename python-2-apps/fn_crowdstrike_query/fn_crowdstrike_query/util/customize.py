# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_crowdstrike_query"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_crowdstrike_query package"""
    reload_params = {"package": u"fn_crowdstrike_query",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"artifact_type", u"artifact_value", u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"crowdstrike_query"], 
                    "functions": [u"query_malware_user_connection"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"crowdstrike_query"], 
                    "actions": [u"Example: Run CrowdStrike Query "] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     artifact_type
    #     artifact_value
    #     incident_id
    #   Message Destinations:
    #     crowdstrike_query
    #   Functions:
    #     query_malware_user_connection
    #   Workflows:
    #     crowdstrike_query
    #   Rules:
    #     Example: Run CrowdStrike Query 


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogImU2MDg1Y2UwLTJlYzMt
NGFhMS1iYmRjLTY2OWU2ZjJmNjU0ZiIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIHdvcmtmbG93IHRl
c3RzIHRoZSBhYmlsaXR5IHRvIHF1ZXJ5IGFuIE1ENSBvciBTSEEtMjU2IEhhc2ggYW5kIHJldHVy
biB0aGUgYXNzb2NpYXRlZCBiZWhhdmlvciBhcm91bmQgdGhhdCBhcnRpZmFjdC4gSXQgYWxzbyBw
cm92aWRlcyBiZWhhdmlvciBjb250ZXh0IGFyb3VuZCBhIGRvbWFpbiBhcyB3ZWxsLiIsICJvYmpl
Y3RfdHlwZSI6ICJhcnRpZmFjdCIsICJleHBvcnRfa2V5IjogImNyb3dkc3RyaWtlX3F1ZXJ5Iiwg
IndvcmtmbG93X2lkIjogMTA1LCAibGFzdF9tb2RpZmllZF9ieSI6ICJnZXJhbGQudHJvdG1hbkBp
Ym0uY29tIiwgImNvbnRlbnQiOiB7InhtbCI6ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rp
bmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3Lm9tZy5vcmcvc3Bl
Yy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDovL3d3dy5vbWcub3Jn
L3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDovL3d3dy5vbWcub3Jn
L3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93d3cub21nLm9yZy9z
cGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDovL3Jlc2lsaWVudC5p
Ym0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVt
YVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNl
XCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90ZXN0XCI+PHByb2Nl
c3MgaWQ9XCJjcm93ZHN0cmlrZV9xdWVyeVwiIGlzRXhlY3V0YWJsZT1cInRydWVcIiBuYW1lPVwi
Q3Jvd2RTdHJpa2UgUXVlcnlcIj48ZG9jdW1lbnRhdGlvbj5UaGlzIHdvcmtmbG93IHRlc3RzIHRo
ZSBhYmlsaXR5IHRvIHF1ZXJ5IGFuIE1ENSBvciBTSEEtMjU2IEhhc2ggYW5kIHJldHVybiB0aGUg
YXNzb2NpYXRlZCBiZWhhdmlvciBhcm91bmQgdGhhdCBhcnRpZmFjdC4gSXQgYWxzbyBwcm92aWRl
cyBiZWhhdmlvciBjb250ZXh0IGFyb3VuZCBhIGRvbWFpbiBhcyB3ZWxsLjwvZG9jdW1lbnRhdGlv
bj48c3RhcnRFdmVudCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5j
ZUZsb3dfMGY1YWc4ZDwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNl
cnZpY2VUYXNrXzFqb3ZzNWJcIiBuYW1lPVwiUXVlcnkgTWFsd2FyZSBVc2VyIENvbm5lY3Rpb25c
IiByZXNpbGllbnQ6dHlwZT1cImZ1bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGll
bnQ6ZnVuY3Rpb24gdXVpZD1cIjRiODYwMWViLTgzNzQtNDNkYi05ZDE0LWJmZTRiMzlmMDMyMlwi
PntcImlucHV0c1wiOnt9LFwicG9zdF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5jaWRlbnQuYWRk
Tm90ZShyZXN1bHRzLnZhbHVlKVwiLFwicHJlX3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpbnB1dHMu
aW5jaWRlbnRfaWQgPSBpbmNpZGVudC5pZFxcbmlucHV0cy5hcnRpZmFjdF90eXBlID0gYXJ0aWZh
Y3QudHlwZVxcbmlucHV0cy5hcnRpZmFjdF92YWx1ZSA9IGFydGlmYWN0LnZhbHVlXFxuXFxuXCIs
XCJyZXN1bHRfbmFtZVwiOlwiXCJ9PC9yZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVt
ZW50cz48aW5jb21pbmc+U2VxdWVuY2VGbG93XzBmNWFnOGQ8L2luY29taW5nPjxvdXRnb2luZz5T
ZXF1ZW5jZUZsb3dfMTVucmFzejwvb3V0Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93
IGlkPVwiU2VxdWVuY2VGbG93XzBmNWFnOGRcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFz
eG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNlVGFza18xam92czViXCIvPjxlbmRFdmVudCBpZD1cIkVu
ZEV2ZW50XzFhbjhheXpcIj48aW5jb21pbmc+U2VxdWVuY2VGbG93XzE1bnJhc3o8L2luY29taW5n
PjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxvdyBpZD1cIlNlcXVlbmNlRmxvd18xNW5yYXN6XCIgc291
cmNlUmVmPVwiU2VydmljZVRhc2tfMWpvdnM1YlwiIHRhcmdldFJlZj1cIkVuZEV2ZW50XzFhbjhh
eXpcIi8+PHRleHRBbm5vdGF0aW9uIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0
PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVyZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lh
dGlvbiBpZD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1
NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48
YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwiQlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5l
IGJwbW5FbGVtZW50PVwidW5kZWZpbmVkXCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBN
TlNoYXBlIGJwbW5FbGVtZW50PVwiU3RhcnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50
XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9
XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0
PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwiMTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFi
ZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4
dEFubm90YXRpb25fMWt4eGl5dFwiIGlkPVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBcIiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRc
Ii8+PC9icG1uZGk6QlBNTlNoYXBlPjxicG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3Nv
Y2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndh
eXBvaW50IHg9XCIxNjlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21n
ZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIv
PjwvYnBtbmRpOkJQTU5FZGdlPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2Vydmlj
ZVRhc2tfMWpvdnM1YlwiIGlkPVwiU2VydmljZVRhc2tfMWpvdnM1Yl9kaVwiPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1cIjEwMFwiIHg9XCIzOThcIiB5PVwiMTY2XCIvPjwvYnBt
bmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93
XzBmNWFnOGRcIiBpZD1cIlNlcXVlbmNlRmxvd18wZjVhZzhkX2RpXCI+PG9tZ2RpOndheXBvaW50
IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5
cG9pbnQgeD1cIjM5OFwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1u
ZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwi
Mjk4XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJw
bW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJFbmRFdmVudF8xYW44YXl6XCIgaWQ9XCJFbmRF
dmVudF8xYW44YXl6X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZc
IiB4PVwiNjc2XCIgeT1cIjE4OFwiLz48YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhl
aWdodD1cIjEzXCIgd2lkdGg9XCIwXCIgeD1cIjY5NFwiIHk9XCIyMjdcIi8+PC9icG1uZGk6QlBN
TkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwi
U2VxdWVuY2VGbG93XzE1bnJhc3pcIiBpZD1cIlNlcXVlbmNlRmxvd18xNW5yYXN6X2RpXCI+PG9t
Z2RpOndheXBvaW50IHg9XCI0OThcIiB4c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwi
Lz48b21nZGk6d2F5cG9pbnQgeD1cIjY3NlwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwi
MjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0
aD1cIjBcIiB4PVwiNTg3XCIgeT1cIjE4NFwiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6
QlBNTkVkZ2U+PC9icG1uZGk6QlBNTlBsYW5lPjwvYnBtbmRpOkJQTU5EaWFncmFtPjwvZGVmaW5p
dGlvbnM+IiwgIndvcmtmbG93X2lkIjogImNyb3dkc3RyaWtlX3F1ZXJ5IiwgInZlcnNpb24iOiAx
MX0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQ1ODkzNjY5ODg4LCAiY3JlYXRvcl9pZCI6ICJn
ZXJhbGQudHJvdG1hbkBpYm0uY29tIiwgImFjdGlvbnMiOiBbXSwgInByb2dyYW1tYXRpY19uYW1l
IjogImNyb3dkc3RyaWtlX3F1ZXJ5IiwgIm5hbWUiOiAiQ3Jvd2RTdHJpa2UgUXVlcnkifV0sICJh
Y3Rpb25zIjogW3sibG9naWNfdHlwZSI6ICJhbGwiLCAibmFtZSI6ICJFeGFtcGxlOiBSdW4gQ3Jv
d2RTdHJpa2UgUXVlcnkgIiwgInZpZXdfaXRlbXMiOiBbXSwgInR5cGUiOiAxLCAid29ya2Zsb3dz
IjogWyJjcm93ZHN0cmlrZV9xdWVyeSJdLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAidGlt
ZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogIjMyMDEwODU5LWZmYTMtNGRkMy05M2I1LWUy
M2JhNGM1YmE4OSIsICJhdXRvbWF0aW9ucyI6IFtdLCAiZXhwb3J0X2tleSI6ICJFeGFtcGxlOiBS
dW4gQ3Jvd2RTdHJpa2UgUXVlcnkgIiwgImNvbmRpdGlvbnMiOiBbXSwgImlkIjogMTUxLCAibWVz
c2FnZV9kZXN0aW5hdGlvbnMiOiBbXX1dLCAibGF5b3V0cyI6IFtdLCAiZXhwb3J0X2Zvcm1hdF92
ZXJzaW9uIjogMiwgImlkIjogNjAsICJpbmR1c3RyaWVzIjogbnVsbCwgInBoYXNlcyI6IFtdLCAi
YWN0aW9uX29yZGVyIjogW10sICJnZW9zIjogbnVsbCwgImxvY2FsZSI6IG51bGwsICJzZXJ2ZXJf
dmVyc2lvbiI6IHsibWFqb3IiOiAzMiwgInZlcnNpb24iOiAiMzIuMC40NTAyIiwgImJ1aWxkX251
bWJlciI6IDQ1MDIsICJtaW5vciI6IDB9LCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3BhY2Vz
IjogW10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgImZ1bmN0aW9ucyI6IFt7ImRpc3BsYXlfbmFt
ZSI6ICJRdWVyeSBNYWx3YXJlIFVzZXIgQ29ubmVjdGlvbiIsICJkZXNjcmlwdGlvbiI6IHsiY29u
dGVudCI6ICJUaGlzIGZ1bmN0aW9uIHBhc3NlcyBpbiB0aGUgYXJ0aWZhY3QgKGZpbGUgbmFtZSkg
Zm9yIGl0cyBwb3RlbnRpYWwgdGhyZWF0IGJlaGF2aW9yIGFuZCB0aGUgbmFtZSBhc3NvY2lhdGVk
IHdpdGggdGhhdCB0aHJlYXQgZGV0ZWN0aW9uLiIsICJmb3JtYXQiOiAidGV4dCJ9LCAiY3JlYXRv
ciI6IHsiZGlzcGxheV9uYW1lIjogIkdlcmFsZCBUcm90bWFuIiwgInR5cGUiOiAidXNlciIsICJp
ZCI6IDQsICJuYW1lIjogImdlcmFsZC50cm90bWFuQGlibS5jb20ifSwgInZpZXdfaXRlbXMiOiBb
eyJzaG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtf
aGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICJlYWQy
MTRjMi0xM2ZlLTQzZjYtYTNjNy02NzZhODgzMzhkYmIiLCAic3RlcF9sYWJlbCI6IG51bGx9LCB7
InNob3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfbGlua19o
ZWFkZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJjb250ZW50IjogIjNhMmUz
NDdiLTY3MmUtNDI2My04Nzg3LWEzZTllYmE0YWM5MSIsICJzdGVwX2xhYmVsIjogbnVsbH0sIHsi
c2hvd19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hl
YWRlciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiOWJhNDk4
ODctMGRjZi00MGNlLWE1ZWEtOWMwYzQzZjgzMWJmIiwgInN0ZXBfbGFiZWwiOiBudWxsfV0sICJl
eHBvcnRfa2V5IjogInF1ZXJ5X21hbHdhcmVfdXNlcl9jb25uZWN0aW9uIiwgInV1aWQiOiAiNGI4
NjAxZWItODM3NC00M2RiLTlkMTQtYmZlNGIzOWYwMzIyIiwgImxhc3RfbW9kaWZpZWRfYnkiOiB7
ImRpc3BsYXlfbmFtZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJ0eXBlIjogInVzZXIiLCAiaWQiOiA0
LCAibmFtZSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIn0sICJ2ZXJzaW9uIjogMTgxLCAid29y
a2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiBudWxsLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3Qi
LCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJDcm93ZFN0cmlrZSBRdWVyeSIsICJ3b3JrZmxvd19p
ZCI6IDEwNSwgInByb2dyYW1tYXRpY19uYW1lIjogImNyb3dkc3RyaWtlX3F1ZXJ5IiwgInV1aWQi
OiBudWxsfV0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTQ3MDQzODM2MzU5LCAiZGVzdGluYXRp
b25faGFuZGxlIjogImNyb3dkc3RyaWtlX3F1ZXJ5IiwgImlkIjogODIsICJuYW1lIjogInF1ZXJ5
X21hbHdhcmVfdXNlcl9jb25uZWN0aW9uIn1dLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1
bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAxNTQ4NzA0
NTExMTg4LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwp
IiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImlk
IjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0
ZV9kYXRlIjogMTU0ODcwNDUxMTE4OCwgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzkt
NGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50
X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10sICJ0eXBlcyI6IFtd
LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjogIjVjYTFlMjA4LTk4YTgtNGYyOS1i
OWE2LTY1MmNjOTg1MjkxZCIsICJleHBvcnRfa2V5IjogImNyb3dkc3RyaWtlX3F1ZXJ5IiwgIm5h
bWUiOiAiQ3Jvd2RTdHJpa2UgUXVlcnkiLCAiZGVzdGluYXRpb25fdHlwZSI6IDAsICJwcm9ncmFt
bWF0aWNfbmFtZSI6ICJjcm93ZHN0cmlrZV9xdWVyeSIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVz
ZXJzIjogWyJnZXJhbGQudHJvdG1hbkBpYm0uY29tIl19XSwgImluY2lkZW50X2FydGlmYWN0X3R5
cGVzIjogW10sICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3BlcmF0aW9ucyI6IFtdLCAidHlw
ZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQiOiAiU2ltdWxhdGlvbiIsICJi
bGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwg
ImlkIjogMzcsICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJjM2YwZTNlZC0yMWUxLTRkNTMt
YWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90eXBlIjogImJvb2xl
YW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBpcyBhIHNpbXVsYXRpb24gb3Ig
YSByZWd1bGFyIGluY2lkZW50LiBUaGlzIGZpZWxkIGlzIHJlYWQtb25seS4iLCAiaW50ZXJuYWwi
OiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5
IjogImluY2lkZW50L2luY190cmFpbmluZyIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAi
bmFtZSI6ICJpbmNfdHJhaW5pbmciLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9jaG9z
ZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtdLCAi
dHlwZV9pZCI6IDExLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogImluY2lkZW50X2lk
IiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0
cnVlLCAiaWQiOiAxMTUsICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiZWFkMjE0YzItMTNm
ZS00M2Y2LWEzYzctNjc2YTg4MzM4ZGJiIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6
ICJudW1iZXIiLCAidG9vbHRpcCI6ICIiLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6
IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vaW5jaWRl
bnRfaWQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJu
YW1lIjogImluY2lkZW50X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwgImRlZmF1bHRfY2hvc2Vu
X2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5
cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAidGV4dCI6ICJhcnRpZmFjdF92YWx1
ZSIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjog
dHJ1ZSwgImlkIjogMTQ5LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjliYTQ5ODg3LTBk
Y2YtNDBjZS1hNWVhLTljMGM0M2Y4MzFiZiIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUi
OiAidGV4dCIsICJ0b29sdGlwIjogIiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0Ijog
ZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgImV4cG9ydF9rZXkiOiAiX19mdW5jdGlvbi9hcnRpZmFj
dF92YWx1ZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAiIiwg
Im5hbWUiOiAiYXJ0aWZhY3RfdmFsdWUiLCAiZGVwcmVjYXRlZCI6IGZhbHNlLCAiZGVmYXVsdF9j
aG9zZW5fYnlfc2VydmVyIjogZmFsc2UsICJ2YWx1ZXMiOiBbXX0sIHsib3BlcmF0aW9ucyI6IFtd
LCAidHlwZV9pZCI6IDExLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogImFydGlmYWN0
X3R5cGUiLCAiYmxhbmtfb3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJs
ZSI6IHRydWUsICJpZCI6IDE1MCwgInJlYWRfb25seSI6IGZhbHNlLCAidXVpZCI6ICIzYTJlMzQ3
Yi02NzJlLTQyNjMtODc4Ny1hM2U5ZWJhNGFjOTEiLCAiY2hvc2VuIjogZmFsc2UsICJpbnB1dF90
eXBlIjogInRleHQiLCAidG9vbHRpcCI6ICIiLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4
dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJleHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vYXJ0
aWZhY3RfdHlwZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNlLCAicGxhY2Vob2xkZXIiOiAi
IiwgIm5hbWUiOiAiYXJ0aWZhY3RfdHlwZSIsICJkZXByZWNhdGVkIjogZmFsc2UsICJkZWZhdWx0
X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJvdmVycmlkZXMiOiBb
XSwgImV4cG9ydF9kYXRlIjogMTU0ODY3NDc3Njg2NX0=
"""
    )