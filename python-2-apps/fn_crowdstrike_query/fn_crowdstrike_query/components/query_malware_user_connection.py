# -*- coding: utf-8 -*-
# Copyright IBM Corp. - Confidential Information
"""Function implementation"""

import logging
from resilient_circuits import ResilientComponent, function, handler, StatusMessage, FunctionResult, FunctionError
import resilient
import requests
import json
from fn_crowdstrike_query.util.helper import sha256_hash_function, md5_hash_function, domains_function


class FunctionComponent(ResilientComponent):
    """Component that implements Resilient function 'query_malware_user_connection"""

    def __init__(self, opts):
        """constructor provides access to the configuration options"""
        super(FunctionComponent, self).__init__(opts)
        self.options = opts.get("fn_crowdstrike_query", {})

    @handler("reload")
    def _reload(self, event, opts):
        """Configuration options have changed, save new values"""
        self.options = opts.get("fn_crowdstrike_query", {})

    @function("query_malware_user_connection")
    def _query_malware_user_connection_function(self, event, *args, **kwargs):
        """Function: This function passes in the artifact (file name) for its potential threat behavior and the name associated with that threat detection."""

        # - method that retreives specific attributes needed for the function to run like credentials, etc...
        def get_config_option(option_name, optional=False):
            """Given option_name, checks if it is in app.config. Raises ValueError if a mandatory option is missing"""
            option = self.options.get(option_name)

            if option is None and optional is False:
                err = "'{0}' is mandatory and is not set in app.config file. You must set this value to run this function".format(
                    option_name)
                raise ValueError(err)
            else:
                return option


        try:
            # Get the function parameters:
            incident_id = kwargs.get("incident_id")  # number
            artifact_type = kwargs.get("artifact_type")  # text
            artifact_value = kwargs.get("artifact_value")  # text

            log = logging.getLogger(__name__)
            log.info("incident_id: %s", incident_id)
            log.info("artifact_type: %s", artifact_type)
            log.info("artifact_value: %s", artifact_value)


            # retreive the CrowdStrike API username and key to pass to the CrowdStrike endpoint
            user = get_config_option("user_name")
            key = get_config_option("api_key")

            # global header to be passed into CrowdStrike REST API call
            headers = {
                'Content-Type': 'application/json',
            }

            # Handles the function output
            detection_results = None


            # PUT YOUR FUNCTION IMPLEMENTATION CODE HERE
            yield StatusMessage("starting...")

            # Handles Malware SHA-256 Hashes from Resilient in relation to CrowdStrike
            if artifact_type == "Malware SHA-256 Hash":
                detection_results = sha256_hash_function(headers, user, key, artifact_value)

                yield StatusMessage("done...")



            # Handles Malware MD5 Hashes from Resilient in relation to CrowdStrike
            elif artifact_type == "Malware MD5 Hash":
                detection_results = md5_hash_function(headers, user, key, artifact_value)

                yield StatusMessage("done...")



            # Handles Domains from Resilient in relation to CrowdStrike
            elif artifact_type == "DNS Name":
                detection_results = domains_function(headers, user, key, artifact_value)

                yield StatusMessage("done...")

            else:
                yield StatusMessage("I'm going to need the correct artifact type...")


            results = {
                "value": detection_results
            }

            # Produce a FunctionResult with the results
            yield FunctionResult(results)
        except Exception:
            yield FunctionError()