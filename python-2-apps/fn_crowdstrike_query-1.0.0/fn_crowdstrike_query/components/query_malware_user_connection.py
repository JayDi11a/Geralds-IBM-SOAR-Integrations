# -*- coding: utf-8 -*-
# pragma pylint: disable=unused-argument, no-self-use
"""Function implementation"""

import logging
from resilient_circuits import ResilientComponent, function, handler, StatusMessage, FunctionResult, FunctionError
import resilient
import requests
import json
from fn_crowdstrike_query.util.helper import sha256_hash_function, md5_hash_function, domains_function


class FunctionComponent(ResilientComponent):
    """Component that implements Resilient function 'query_malware_user_connection"""

    def __init__(self, opts):
        """constructor provides access to the configuration options"""
        super(FunctionComponent, self).__init__(opts)
        self.options = opts.get("fn_crowdstrike_query", {})

    @handler("reload")
    def _reload(self, event, opts):
        """Configuration options have changed, save new values"""
        self.options = opts.get("fn_crowdstrike_query", {})

    @function("query_malware_user_connection")
    def _query_malware_user_connection_function(self, event, *args, **kwargs):
        """Function: This function passes in the artifact (file name) for its potential threat behavior and the name associated with that threat detection."""

        # - method that retreives specific attributes needed for the function to run like credentials, etc...
        def get_config_option(option_name, optional=False):
            """Given option_name, checks if it is in app.config. Raises ValueError if a mandatory option is missing"""
            option = self.options.get(option_name)

            if option is None and optional is False:
                err = "'{0}' is mandatory and is not set in ~/.resilient/app.config file. You must set this value to run this function".format(
                    option_name)
                raise ValueError(err)
            else:
                return option


        try:
            # Get the function parameters:
            incident_id = kwargs.get("incident_id")  # number
            artifact_type = kwargs.get("artifact_type")  # text
            artifact_value = kwargs.get("artifact_value")  # text

            log = logging.getLogger(__name__)
            log.info("incident_id: %s", incident_id)
            log.info("artifact_type: %s", artifact_type)
            log.info("artifact_value: %s", artifact_value)

            # talks to the config file and gets the auth credentials necessary to talk to Resilient REST API
            parser = resilient.ArgumentParser(config_file=resilient.get_config_file())
            opts = parser.parse_args()
            client = resilient.get_client(opts)

            # retreive the CrowdStrike API username and key to pass to the CrowdStrike endpoint
            user = get_config_option("user_name")
            key = get_config_option("api_key")

            # global header to be passed into CrowdStrike REST API call
            headers = {
                'Content-Type': 'application/json',
            }

            # Handles the function output
            #detection_results = None

            # PUT YOUR FUNCTION IMPLEMENTATION CODE HERE
            yield StatusMessage("starting...")

            # Handles Malware SHA-256 Hashes from Resilient in relation to CrowdStrike
            if artifact_type == "Malware SHA-256 Hash":
                detection_results = sha256_hash_function(headers, user, key, artifact_value)


                # headers = {
                #     'Content-Type': 'application/json',
                # }
                #
                # # Validate IF IOC Exists in CrowdStrike
                # sha256_params = (
                #     ('ids', 'sha256:{}'.format(artifact_value)),
                # )
                #
                # sha256_query = requests.get('https://falconapi.crowdstrike.com/indicators/entities/iocs/v1',
                #                         headers=headers, params=sha256_params, auth=(user, key))
                # sha256_query_object = sha256_query.json()
                # sha256_query_string = json.dumps(sha256_query_object['resources'])
                #
                # # This POSTs the SHA-256 Hash to CrowdStrike because it didn't exist prior to being added into Resilient as an artifact
                # if sha256_query_string == "[]":
                #     sha_data = '[{{"type":"sha256","value":"{}","description":"description","share level":"red","source":"source","policy":"detect"}}]'.format(
                #         artifact_value)
                #
                #     sha256_response = requests.post('https://falconapi.crowdstrike.com/indicators/entities/iocs/v1',
                #                                  headers=headers, data=sha_data,
                #                                  auth=(user, key))
                #
                #     yield StatusMessage("This Malware SHA-256 Hash wasn't in CrowdStrike so I went ahead and uploaded it for you...")
                #
                #     # Redundant but necessary step to ensure that the IOC was uploaded in the event that it wasn't in CrowdStrike to begin with.
                #     sha256_request = requests.get('https://falconapi.crowdstrike.com/indicators/entities/iocs/v1',
                #                             headers=headers, params=sha256_params, auth=(user,key))
                #     sha256_request_object = sha256_request.json()
                #     sha256_request_string = json.dumps(sha256_request_object['resources'][0]['value'], sort_keys=True, indent=4)
                #
                #     print(sha256_request_string)
                #
                #     # Gets the device the IOC Ran on and returns the device id
                #     device_params = (
                #         ('type', 'sha256'),
                #         ('value', artifact_value),
                #     )
                #
                #     device_id_query = requests.get('https://falconapi.crowdstrike.com/indicators/queries/devices/v1',
                #                             headers=headers, params=device_params, auth=(user, key))
                #
                #     device_id_object = device_id_query.json()
                #     device_id_string = json.dumps(device_id_object['resources'])
                #
                #     print(device_id_string)
                #
                #     if device_id_string == "[]":
                #         yield StatusMessage("The sensor for this device is not picking up {}".format(artifact_value))
                #
                #     else:
                #         detection_params = (
                #             ('filter', ('behaviors.sha256:\'{}\'').format(artifact_value)),
                #         )
                #
                #         # This gets the detection ids to be passed
                #         detection_id_query = requests.get('https://falconapi.crowdstrike.com/detects/queries/detects/v1',
                #                                     headers=headers,
                #                                     params=detection_params, auth=(user, key))
                #
                #
                #         detection_id_object = detection_id_query.json()
                #         detection_id_string = json.dumps(detection_id_object['resources'])
                #
                #         data = '{"ids":' + detection_id_string + "}"
                #
                #         # This returns the results from the detection ID
                #         detection_response = requests.post('https://falconapi.crowdstrike.com/detects/entities/summaries/GET/v1',
                #                                         headers=headers, data=data,
                #                                         auth=(user, key))
                #
                #         detection_response_object = detection_response.json()
                #         detection_response_string = json.dumps(detection_response_object, sort_keys=True, indent=4)
                #         behavior_output = detection_response_string
                # else:
                #
                #     detection_params = (
                #         ('filter', ('behaviors.sha256:\'{}\'').format(artifact_value)),
                #     )
                #
                #     # This gets the detection ids to be passed
                #     detection_id_query = requests.get('https://falconapi.crowdstrike.com/detects/queries/detects/v1',
                #                                       headers=headers,
                #                                       params=detection_params, auth=(user, key))
                #
                #     detection_id_object = detection_id_query.json()
                #     detection_id_string = json.dumps(detection_id_object['resources'])
                #
                #     data = '{"ids":' + detection_id_string + "}"
                #
                #     # This returns the results from the detection ID
                #     detection_response = requests.post(
                #         'https://falconapi.crowdstrike.com/detects/entities/summaries/GET/v1',
                #         headers=headers, data=data,
                #         auth=(user, key))
                #
                #     detection_response_object = detection_response.json()
                #     detection_response_string = json.dumps(detection_response_object, sort_keys=True, indent=4)
                #
                #
                #     if json.dumps(detection_response_object['resources']) == "[]":
                #         yield StatusMessage("There are no detection IDs assoicated with the artifact you just ran but the artifact was in CrowdStrike which is weird...")
                #
                #     else:
                #         print(detection_response_string)
                #         behavior_output = detection_response_string


            # Handles Malware MD5 Hashes from Resilient in relation to CrowdStrike
            elif artifact_type == "Malware MD5 Hash":
                detection_results = md5_hash_function(headers, user, key, artifact_value)
                # headers = {
                #     'Content-Type': 'application/json',
                # }
                #
                # # Validate IF IOC Exists in CrowdStrike
                # md5_params = (
                #     ('ids', ('md5:{}').format(artifact_value)),
                # )
                #
                # md5_query = requests.get('https://falconapi.crowdstrike.com/indicators/entities/iocs/v1',
                #                             headers=headers, params=md5_params, auth=(user, key))
                # md5_query_object = md5_query.json()
                # md5_query_string = json.dumps(md5_query_object['resources'])
                #
                # # This POSTs the MD5 Hash to CrowdStrike because it didn't exist prior to being added into Resilient as an artifact
                # if md5_query_string == "[]":
                #     md5_data = '[{{"type":"md5","value":"{}","description":"description","share level":"red","source":"source","policy":"detect"}}]'.format(artifact_value)
                #
                #     md5_response = requests.post('https://falconapi.crowdstrike.com/indicators/entities/iocs/v1',
                #                                 headers=headers, data=md5_data,
                #                                 auth=(user, key))
                #     print(md5_response.json())
                #     yield StatusMessage("This Malware MD5 Hash wasn't in CrowdStrike so I went ahead and uploaded it for you...")
                #
                #     # Redundant but necessary step to ensure that the IOC was uploaded in the event that it wasn't in CrowdStrike to begin with.
                #     md5_request = requests.get('https://falconapi.crowdstrike.com/indicators/entities/iocs/v1',
                #                                   headers=headers, params=md5_params, auth=(user, key))
                #     md5_request_object = md5_request.json()
                #     md5_request_string = json.dumps(md5_request_object['resources'][0]['value'], sort_keys=True,
                #                                      indent=4)
                #
                #     print(md5_request_string)
                #
                #     # Gets the device the IOC Ran on and returns the device id
                #     device_params = (
                #         ('type', 'md5'),
                #         ('value', artifact_value),
                #     )
                #
                #     device_id_query = requests.get('https://falconapi.crowdstrike.com/indicators/queries/devices/v1',
                #                                    headers=headers, params=device_params, auth=(user, key))
                #
                #     device_id_object = device_id_query.json()
                #     device_id_string = json.dumps(device_id_object['resources'])
                #
                #     print(device_id_string)
                #
                #     if device_id_string == "[]":
                #         yield StatusMessage("The sensor for this device is not picking up {}".format(artifact_value))
                #
                #     else:
                #         detection_params = (
                #             ('filter', ('behaviors.md5:\'{}\'').format(artifact_value)),
                #         )
                #
                #         # This gets the detection ids to be passed
                #         detection_id_query = requests.get(
                #             'https://falconapi.crowdstrike.com/detects/queries/detects/v1',
                #             headers=headers,
                #             params=detection_params, auth=(user, key))
                #
                #         detection_id_object = detection_id_query.json()
                #         detection_id_string = json.dumps(detection_id_object['resources'])
                #
                #         data = '{"ids":' + detection_id_string + "}"
                #
                #         # This returns the results from the detection ID
                #         detection_response = requests.post(
                #             'https://falconapi.crowdstrike.com/detects/entities/summaries/GET/v1',
                #             headers=headers, data=data,
                #             auth=(user, key))
                #
                #         detection_response_object = detection_response.json()
                #         detection_response_string = json.dumps(detection_response_object, sort_keys=True, indent=4)
                #         behavior_output = detection_response_string
                # else:
                #     detection_params = (
                #         ('filter', ('behaviors.md5:\'{}\'').format(artifact_value)),
                #     )
                #
                #     # This gets the detection ids to be passed
                #     detection_id_query = requests.get('https://falconapi.crowdstrike.com/detects/queries/detects/v1',
                #                                       headers=headers,
                #                                       params=detection_params, auth=(user, key))
                #
                #     detection_id_object = detection_id_query.json()
                #     detection_id_string = json.dumps(detection_id_object['resources'])
                #
                #     data = '{"ids":' + detection_id_string + "}"
                #
                #     # This returns the results from the detection ID
                #     detection_response = requests.post(
                #         'https://falconapi.crowdstrike.com/detects/entities/summaries/GET/v1',
                #         headers=headers, data=data,
                #         auth=(user, key))
                #
                #     detection_response_object = detection_response.json()
                #     detection_response_string = json.dumps(detection_response_object, sort_keys=True, indent=4)
                #
                #     if json.dumps(detection_response_object['resources']) == "[]":
                #         yield StatusMessage("There are no detection IDs assoicated with the artifact you just ran but the artifact was in CrowdStrike which is weird...")
                #
                #     else:
                #         print(detection_response_string)
                #         behavior_output = detection_response_string

            # Handles Domains from Resilient in relation to CrowdStrike
            elif artifact_type == "DNS Name":
                detection_results = domains_function(header, user, key, artifact_value)

            else:
                yield StatusMessage("I'm going to need the correct artifact type...")

            yield StatusMessage("done...")

            results = {
                "value": detection_results
            }

            # Produce a FunctionResult with the results
            yield FunctionResult(results)
        except Exception:
            yield FunctionError()