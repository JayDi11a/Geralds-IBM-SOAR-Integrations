# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_phishcheck"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_phishcheck package"""
    reload_params = {"package": u"fn_phishcheck",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"artifact_id", u"artifact_value", u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"phishcheck"], 
                    "functions": [u"phishcheck_check_url"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_submit_url_to_phishcheck"], 
                    "actions": [u"Example: Phishcheck Submit URL"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     artifact_id
    #     artifact_value
    #     incident_id
    #   Message Destinations:
    #     phishcheck
    #   Functions:
    #     phishcheck_check_url
    #   Workflows:
    #     example_submit_url_to_phishcheck
    #   Rules:
    #     Example: Phishcheck Submit URL


    yield ImportDefinition(u"""
eyJncm91cHMiOiBudWxsLCAibG9jYWxlIjogbnVsbCwgIndvcmtmbG93cyI6IFt7ImRlc2NyaXB0
aW9uIjogIlRoaXMgd29ya2Zsb3cgdXNlcyB0aGUgUGhpc2hjaGVjayBmdW5jdGlvbiB0byBydW4g
YW5hbHlzaXMgb24gdXJscy4iLCAid29ya2Zsb3dfaWQiOiAyMzksICJ0YWdzIjogW10sICJvYmpl
Y3RfdHlwZSI6ICJhcnRpZmFjdCIsICJleHBvcnRfa2V5IjogImV4YW1wbGVfc3VibWl0X3VybF90
b19waGlzaGNoZWNrIiwgInV1aWQiOiAiM2E3NzA2MzktNWZmNi00NjViLTlmZTEtYmY0NzAzNjAw
Mjg1IiwgImFjdGlvbnMiOiBbXSwgImNvbnRlbnQiOiB7InhtbCI6ICI8P3htbCB2ZXJzaW9uPVwi
MS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJodHRwOi8vd3d3
Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRpPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2RjPVwiaHR0cDov
L3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1cImh0dHA6Ly93
d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50PVwiaHR0cDov
L3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3LnczLm9yZy8y
MDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2No
ZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11bmRhLm9yZy90
ZXN0XCI+PHByb2Nlc3MgaWQ9XCJleGFtcGxlX3N1Ym1pdF91cmxfdG9fcGhpc2hjaGVja1wiIGlz
RXhlY3V0YWJsZT1cInRydWVcIiBuYW1lPVwiRXhhbXBsZTogU3VibWl0IFVSTCBUbyBQaGlzaGNo
ZWNrXCI+PGRvY3VtZW50YXRpb24+VGhpcyB3b3JrZmxvdyB1c2VzIHRoZSBQaGlzaGNoZWNrIGZ1
bmN0aW9uIHRvIHJ1biBhbmFseXNpcyBvbiB1cmxzLjwvZG9jdW1lbnRhdGlvbj48c3RhcnRFdmVu
dCBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMWtiajJx
ZDwvb3V0Z29pbmc+PC9zdGFydEV2ZW50PjxzZXJ2aWNlVGFzayBpZD1cIlNlcnZpY2VUYXNrXzB5
cWY4YWZcIiBuYW1lPVwiUGhpc2hjaGVjayBDaGVjayBVUkxcIiByZXNpbGllbnQ6dHlwZT1cImZ1
bmN0aW9uXCI+PGV4dGVuc2lvbkVsZW1lbnRzPjxyZXNpbGllbnQ6ZnVuY3Rpb24gdXVpZD1cImU0
OGU3NDdkLTU5YWItNDU3Mi1iZTFiLTU3NTdlOGYzMzdkM1wiPntcImlucHV0c1wiOnt9LFwicG9z
dF9wcm9jZXNzaW5nX3NjcmlwdFwiOlwiaW5jaWRlbnQuYWRkTm90ZShyZXN1bHRzLnZhbHVlKVwi
LFwicHJlX3Byb2Nlc3Npbmdfc2NyaXB0XCI6XCJpbnB1dHMuaW5jaWRlbnRfaWQgPSBpbmNpZGVu
dC5pZFxcbmlucHV0cy5hcnRpZmFjdF92YWx1ZSA9IGFydGlmYWN0LnZhbHVlXFxuaW5wdXRzLmFy
dGlmYWN0X2lkID0gYXJ0aWZhY3QuaWRcXG5cIixcInJlc3VsdF9uYW1lXCI6XCJcIn08L3Jlc2ls
aWVudDpmdW5jdGlvbj48L2V4dGVuc2lvbkVsZW1lbnRzPjxpbmNvbWluZz5TZXF1ZW5jZUZsb3df
MWtiajJxZDwvaW5jb21pbmc+PG91dGdvaW5nPlNlcXVlbmNlRmxvd18xeXQ2bnYxPC9vdXRnb2lu
Zz48L3NlcnZpY2VUYXNrPjxzZXF1ZW5jZUZsb3cgaWQ9XCJTZXF1ZW5jZUZsb3dfMWtiajJxZFwi
IHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlNlcnZpY2VUYXNr
XzB5cWY4YWZcIi8+PGVuZEV2ZW50IGlkPVwiRW5kRXZlbnRfMWRmZTIweVwiPjxpbmNvbWluZz5T
ZXF1ZW5jZUZsb3dfMXl0Nm52MTwvaW5jb21pbmc+PC9lbmRFdmVudD48c2VxdWVuY2VGbG93IGlk
PVwiU2VxdWVuY2VGbG93XzF5dDZudjFcIiBzb3VyY2VSZWY9XCJTZXJ2aWNlVGFza18weXFmOGFm
XCIgdGFyZ2V0UmVmPVwiRW5kRXZlbnRfMWRmZTIweVwiLz48dGV4dEFubm90YXRpb24gaWQ9XCJU
ZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCI+PHRleHQ+U3RhcnQgeW91ciB3b3JrZmxvdyBoZXJlPC90
ZXh0PjwvdGV4dEFubm90YXRpb24+PGFzc29jaWF0aW9uIGlkPVwiQXNzb2NpYXRpb25fMXNldWo0
OFwiIHNvdXJjZVJlZj1cIlN0YXJ0RXZlbnRfMTU1YXN4bVwiIHRhcmdldFJlZj1cIlRleHRBbm5v
dGF0aW9uXzFreHhpeXRcIi8+PC9wcm9jZXNzPjxicG1uZGk6QlBNTkRpYWdyYW0gaWQ9XCJCUE1O
RGlhZ3JhbV8xXCI+PGJwbW5kaTpCUE1OUGxhbmUgYnBtbkVsZW1lbnQ9XCJ1bmRlZmluZWRcIiBp
ZD1cIkJQTU5QbGFuZV8xXCI+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTdGFydEV2
ZW50XzE1NWFzeG1cIiBpZD1cIlN0YXJ0RXZlbnRfMTU1YXN4bV9kaVwiPjxvbWdkYzpCb3VuZHMg
aGVpZ2h0PVwiMzZcIiB3aWR0aD1cIjM2XCIgeD1cIjE2MlwiIHk9XCIxODhcIi8+PGJwbW5kaTpC
UE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIwXCIgd2lkdGg9XCI5MFwiIHg9XCIxNTdc
IiB5PVwiMjIzXCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5k
aTpCUE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJUZXh0QW5ub3RhdGlvbl8xa3h4aXl0XCIgaWQ9XCJU
ZXh0QW5ub3RhdGlvbl8xa3h4aXl0X2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCIzMFwiIHdp
ZHRoPVwiMTAwXCIgeD1cIjk5XCIgeT1cIjI1NFwiLz48L2JwbW5kaTpCUE1OU2hhcGU+PGJwbW5k
aTpCUE1ORWRnZSBicG1uRWxlbWVudD1cIkFzc29jaWF0aW9uXzFzZXVqNDhcIiBpZD1cIkFzc29j
aWF0aW9uXzFzZXVqNDhfZGlcIj48b21nZGk6d2F5cG9pbnQgeD1cIjE2OVwiIHhzaTp0eXBlPVwi
b21nZGM6UG9pbnRcIiB5PVwiMjIwXCIvPjxvbWdkaTp3YXlwb2ludCB4PVwiMTUzXCIgeHNpOnR5
cGU9XCJvbWdkYzpQb2ludFwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpC
UE1OU2hhcGUgYnBtbkVsZW1lbnQ9XCJTZXJ2aWNlVGFza18weXFmOGFmXCIgaWQ9XCJTZXJ2aWNl
VGFza18weXFmOGFmX2RpXCI+PG9tZ2RjOkJvdW5kcyBoZWlnaHQ9XCI4MFwiIHdpZHRoPVwiMTAw
XCIgeD1cIjQwOS40MjQ3MzYzMzc0ODhcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48
YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzFrYmoycWRcIiBpZD1c
IlNlcXVlbmNlRmxvd18xa2JqMnFkX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6
dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjQwOVwi
IHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxv
bWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiMzAzLjVcIiB5PVwiMTg0
XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48YnBtbmRpOkJQTU5TaGFw
ZSBicG1uRWxlbWVudD1cIkVuZEV2ZW50XzFkZmUyMHlcIiBpZD1cIkVuZEV2ZW50XzFkZmUyMHlf
ZGlcIj48b21nZGM6Qm91bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCI3MzYuNDI0
NzM2MzM3NDg4MVwiIHk9XCIxODhcIi8+PGJwbW5kaTpCUE1OTGFiZWw+PG9tZ2RjOkJvdW5kcyBo
ZWlnaHQ9XCIxM1wiIHdpZHRoPVwiMFwiIHg9XCI3NTQuNDI0NzM2MzM3NDg4MVwiIHk9XCIyMjdc
Ii8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQTU5FZGdl
IGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzF5dDZudjFcIiBpZD1cIlNlcXVlbmNlRmxvd18x
eXQ2bnYxX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI1MDlcIiB4c2k6dHlwZT1cIm9tZ2RjOlBv
aW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjczNlwiIHhzaTp0eXBlPVwib21n
ZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVp
Z2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNjIyLjVcIiB5PVwiMTg0XCIvPjwvYnBtbmRpOkJQ
TU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1OUGxhbmU+PC9icG1uZGk6QlBN
TkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAid29ya2Zsb3dfaWQiOiAiZXhhbXBsZV9zdWJtaXRf
dXJsX3RvX3BoaXNoY2hlY2siLCAidmVyc2lvbiI6IDN9LCAiY3JlYXRvcl9pZCI6ICJnZXJhbGQu
dHJvdG1hbkBpYm0uY29tIiwgImxhc3RfbW9kaWZpZWRfYnkiOiAiZ2VyYWxkLnRyb3RtYW5AaWJt
LmNvbSIsICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTczNDA4NjYzMjkxLCAiY29udGVudF92ZXJz
aW9uIjogMywgInByb2dyYW1tYXRpY19uYW1lIjogImV4YW1wbGVfc3VibWl0X3VybF90b19waGlz
aGNoZWNrIiwgIm5hbWUiOiAiRXhhbXBsZTogU3VibWl0IFVSTCBUbyBQaGlzaGNoZWNrIn1dLCAi
YWN0aW9ucyI6IFt7InRpbWVvdXRfc2Vjb25kcyI6IDg2NDAwLCAib2JqZWN0X3R5cGUiOiAiYXJ0
aWZhY3QiLCAidHlwZSI6IDEsICJuYW1lIjogIkV4YW1wbGU6IFBoaXNoY2hlY2sgU3VibWl0IFVS
TCIsICJ0YWdzIjogW10sICJ2aWV3X2l0ZW1zIjogW10sICJlbmFibGVkIjogdHJ1ZSwgIndvcmtm
bG93cyI6IFsiZXhhbXBsZV9zdWJtaXRfdXJsX3RvX3BoaXNoY2hlY2siXSwgImxvZ2ljX3R5cGUi
OiAiYWxsIiwgImV4cG9ydF9rZXkiOiAiRXhhbXBsZTogUGhpc2hjaGVjayBTdWJtaXQgVVJMIiwg
InV1aWQiOiAiOGQ5MDIxMWUtYjljNy00NGYxLThlNWUtNWEzZGM5ODU3NTFlIiwgImF1dG9tYXRp
b25zIjogW10sICJjb25kaXRpb25zIjogW10sICJpZCI6IDI2NiwgIm1lc3NhZ2VfZGVzdGluYXRp
b25zIjogW119XSwgImxheW91dHMiOiBbXSwgImV4cG9ydF9mb3JtYXRfdmVyc2lvbiI6IDIsICJp
ZCI6IDk2LCAiaW5kdXN0cmllcyI6IG51bGwsICJmdW5jdGlvbnMiOiBbeyJkaXNwbGF5X25hbWUi
OiAiUGhpc2hjaGVjayBDaGVjayBVUkwiLCAiZGVzY3JpcHRpb24iOiB7ImNvbnRlbnQiOiAiVGhp
cyBmdW5jdGlvbiB0YWtlcyBpbiBhIHVybCB2YWx1ZSBhbmQgcGFzc2VzIGl0IHRvIHRoZSBQaGlz
aGNoZWNrIGVuZHBvaW50IHRvIGJlIGFuYWx5emVkLiBUaGVuIGl0IHJldHVybnMgdGhlIHJlc3Vs
dHMgYmFjayB0byB0aGUgaW5jaWRlbnQuIiwgImZvcm1hdCI6ICJ0ZXh0In0sICJjcmVhdG9yIjog
eyJ0eXBlIjogInVzZXIiLCAiZGlzcGxheV9uYW1lIjogIkdlcmFsZCBUcm90bWFuIiwgImlkIjog
NCwgIm5hbWUiOiAiZ2VyYWxkLnRyb3RtYW5AaWJtLmNvbSJ9LCAidmlld19pdGVtcyI6IFt7InNo
b3dfaWYiOiBudWxsLCAiZmllbGRfdHlwZSI6ICJfX2Z1bmN0aW9uIiwgInNob3dfbGlua19oZWFk
ZXIiOiBmYWxzZSwgImVsZW1lbnQiOiAiZmllbGRfdXVpZCIsICJjb250ZW50IjogImVhZDIxNGMy
LTEzZmUtNDNmNi1hM2M3LTY3NmE4ODMzOGRiYiIsICJzdGVwX2xhYmVsIjogbnVsbH0sIHsic2hv
d19pZiI6IG51bGwsICJmaWVsZF90eXBlIjogIl9fZnVuY3Rpb24iLCAic2hvd19saW5rX2hlYWRl
ciI6IGZhbHNlLCAiZWxlbWVudCI6ICJmaWVsZF91dWlkIiwgImNvbnRlbnQiOiAiNWU5NGIxZDMt
NDhhMS00MThhLTljZTMtNDQzM2M2ODg5ZTE0IiwgInN0ZXBfbGFiZWwiOiBudWxsfSwgeyJzaG93
X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5jdGlvbiIsICJzaG93X2xpbmtfaGVhZGVy
IjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQiLCAiY29udGVudCI6ICI5YmE0OTg4Ny0w
ZGNmLTQwY2UtYTVlYS05YzBjNDNmODMxYmYiLCAic3RlcF9sYWJlbCI6IG51bGx9XSwgInRhZ3Mi
OiBbXSwgImV4cG9ydF9rZXkiOiAicGhpc2hjaGVja19jaGVja191cmwiLCAidXVpZCI6ICJlNDhl
NzQ3ZC01OWFiLTQ1NzItYmUxYi01NzU3ZThmMzM3ZDMiLCAibGFzdF9tb2RpZmllZF9ieSI6IHsi
dHlwZSI6ICJ1c2VyIiwgImRpc3BsYXlfbmFtZSI6ICJHZXJhbGQgVHJvdG1hbiIsICJpZCI6IDQs
ICJuYW1lIjogImdlcmFsZC50cm90bWFuQGlibS5jb20ifSwgInZlcnNpb24iOiAxLCAid29ya2Zs
b3dzIjogW3sicHJvZ3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9zdWJtaXRfdXJsX3RvX3BoaXNo
Y2hlY2siLCAidGFncyI6IFtdLCAib2JqZWN0X3R5cGUiOiAiYXJ0aWZhY3QiLCAidXVpZCI6IG51
bGwsICJhY3Rpb25zIjogW10sICJuYW1lIjogIkV4YW1wbGU6IFN1Ym1pdCBVUkwgVG8gUGhpc2hj
aGVjayIsICJ3b3JrZmxvd19pZCI6IDIzOSwgImRlc2NyaXB0aW9uIjogbnVsbH1dLCAibGFzdF9t
b2RpZmllZF90aW1lIjogMTU3MzQwODIzNDI1MSwgImRlc3RpbmF0aW9uX2hhbmRsZSI6ICJwaGlz
aGNoZWNrIiwgImlkIjogMjMzLCAibmFtZSI6ICJwaGlzaGNoZWNrX2NoZWNrX3VybCJ9XSwgImFj
dGlvbl9vcmRlciI6IFtdLCAiZ2VvcyI6IG51bGwsICJ0YWdzIjogW10sICJ0YXNrX29yZGVyIjog
W10sICJ0eXBlcyI6IFtdLCAidGltZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3BhY2VzIjogW10sICJp
bmJvdW5kX21haWxib3hlcyI6IG51bGwsICJhdXRvbWF0aWNfdGFza3MiOiBbXSwgInBoYXNlcyI6
IFtdLCAibm90aWZpY2F0aW9ucyI6IG51bGwsICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50
X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAxNTczNDM4ODkxODM2LCAiZGVzY3JpcHRpb24iOiAi
Q3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9t
aXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXph
dGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwgInVwZGF0ZV9kYXRlIjogMTU3MzQzODg5MTgzNiwg
InV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQi
OiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAicGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZh
bHNlfV0sICJzY3JpcHRzIjogW10sICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzNCwgInZl
cnNpb24iOiAiMzQuMS41MyIsICJidWlsZF9udW1iZXIiOiA1MywgIm1pbm9yIjogMX0sICJtZXNz
YWdlX2Rlc3RpbmF0aW9ucyI6IFt7InByb2dyYW1tYXRpY19uYW1lIjogInBoaXNoY2hlY2siLCAi
dGFncyI6IFtdLCAiZXhwb3J0X2tleSI6ICJwaGlzaGNoZWNrIiwgInV1aWQiOiAiMWQ2YjNlNjAt
MGQzOS00MmUyLWFiZDMtZDFkNDA5YWFhYTI0IiwgImV4cGVjdF9hY2siOiB0cnVlLCAiZGVzdGlu
YXRpb25fdHlwZSI6IDAsICJ1c2VycyI6IFtdLCAiYXBpX2tleXMiOiBbXSwgIm5hbWUiOiAiUGhp
c2hjaGVjayJ9XSwgImluY2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJyb2xlcyI6IFtdLCAi
ZmllbGRzIjogW3sib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDExLCAib3BlcmF0aW9uX3Bl
cm1zIjoge30sICJ0ZXh0IjogImluY2lkZW50X2lkIiwgImJsYW5rX29wdGlvbiI6IGZhbHNlLCAi
cHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAxMTUsICJyZWFkX29ubHki
OiBmYWxzZSwgInV1aWQiOiAiZWFkMjE0YzItMTNmZS00M2Y2LWEzYzctNjc2YTg4MzM4ZGJiIiwg
ImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAidG9vbHRpcCI6ICIiLCAi
aW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVtcGxhdGVzIjogW10sICJ0
YWdzIjogW10sICJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFsc2UsICJleHBvcnRfa2V5IjogIl9f
ZnVuY3Rpb24vaW5jaWRlbnRfaWQiLCAiaGlkZV9ub3RpZmljYXRpb24iOiBmYWxzZSwgInBsYWNl
aG9sZGVyIjogIiIsICJuYW1lIjogImluY2lkZW50X2lkIiwgImRlcHJlY2F0ZWQiOiBmYWxzZSwg
ImNhbGN1bGF0ZWQiOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAiZGVmYXVsdF9jaG9zZW5fYnlfc2Vy
dmVyIjogZmFsc2V9LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlv
bl9wZXJtcyI6IHt9LCAidGV4dCI6ICJhcnRpZmFjdF92YWx1ZSIsICJibGFua19vcHRpb24iOiBm
YWxzZSwgInByZWZpeCI6IG51bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMTQ5LCAicmVh
ZF9vbmx5IjogZmFsc2UsICJ1dWlkIjogIjliYTQ5ODg3LTBkY2YtNDBjZS1hNWVhLTljMGM0M2Y4
MzFiZiIsICJjaG9zZW4iOiBmYWxzZSwgImlucHV0X3R5cGUiOiAidGV4dCIsICJ0b29sdGlwIjog
IiIsICJpbnRlcm5hbCI6IGZhbHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBb
XSwgInRhZ3MiOiBbXSwgImFsbG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImV4cG9ydF9rZXki
OiAiX19mdW5jdGlvbi9hcnRpZmFjdF92YWx1ZSIsICJoaWRlX25vdGlmaWNhdGlvbiI6IGZhbHNl
LCAicGxhY2Vob2xkZXIiOiAiIiwgIm5hbWUiOiAiYXJ0aWZhY3RfdmFsdWUiLCAiZGVwcmVjYXRl
ZCI6IGZhbHNlLCAiY2FsY3VsYXRlZCI6IGZhbHNlLCAidmFsdWVzIjogW10sICJkZWZhdWx0X2No
b3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZX0sIHsib3BlcmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDEx
LCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogImFydGlmYWN0X2lkIiwgImJsYW5rX29w
dGlvbiI6IGZhbHNlLCAicHJlZml4IjogbnVsbCwgImNoYW5nZWFibGUiOiB0cnVlLCAiaWQiOiAy
NjksICJyZWFkX29ubHkiOiBmYWxzZSwgInV1aWQiOiAiNWU5NGIxZDMtNDhhMS00MThhLTljZTMt
NDQzM2M2ODg5ZTE0IiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJudW1iZXIiLCAi
dG9vbHRpcCI6ICIiLCAiaW50ZXJuYWwiOiBmYWxzZSwgInJpY2hfdGV4dCI6IGZhbHNlLCAidGVt
cGxhdGVzIjogW10sICJ0YWdzIjogW10sICJhbGxvd19kZWZhdWx0X3ZhbHVlIjogZmFsc2UsICJl
eHBvcnRfa2V5IjogIl9fZnVuY3Rpb24vYXJ0aWZhY3RfaWQiLCAiaGlkZV9ub3RpZmljYXRpb24i
OiBmYWxzZSwgInBsYWNlaG9sZGVyIjogIiIsICJuYW1lIjogImFydGlmYWN0X2lkIiwgImRlcHJl
Y2F0ZWQiOiBmYWxzZSwgImNhbGN1bGF0ZWQiOiBmYWxzZSwgInZhbHVlcyI6IFtdLCAiZGVmYXVs
dF9jaG9zZW5fYnlfc2VydmVyIjogZmFsc2V9LCB7Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQi
OiAwLCAib3BlcmF0aW9uX3Blcm1zIjoge30sICJ0ZXh0IjogIlNpbXVsYXRpb24iLCAiYmxhbmtf
b3B0aW9uIjogZmFsc2UsICJwcmVmaXgiOiBudWxsLCAiY2hhbmdlYWJsZSI6IHRydWUsICJpZCI6
IDM3LCAicmVhZF9vbmx5IjogdHJ1ZSwgInV1aWQiOiAiYzNmMGUzZWQtMjFlMS00ZDUzLWFmZmIt
ZmU1Y2EzMzA4Y2NhIiwgImNob3NlbiI6IGZhbHNlLCAiaW5wdXRfdHlwZSI6ICJib29sZWFuIiwg
InRvb2x0aXAiOiAiV2hldGhlciB0aGUgaW5jaWRlbnQgaXMgYSBzaW11bGF0aW9uIG9yIGEgcmVn
dWxhciBpbmNpZGVudC4gIFRoaXMgZmllbGQgaXMgcmVhZC1vbmx5LiIsICJpbnRlcm5hbCI6IGZh
bHNlLCAicmljaF90ZXh0IjogZmFsc2UsICJ0ZW1wbGF0ZXMiOiBbXSwgInRhZ3MiOiBbXSwgImFs
bG93X2RlZmF1bHRfdmFsdWUiOiBmYWxzZSwgImV4cG9ydF9rZXkiOiAiaW5jaWRlbnQvaW5jX3Ry
YWluaW5nIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJuYW1lIjogImluY190cmFpbmlu
ZyIsICJkZXByZWNhdGVkIjogZmFsc2UsICJjYWxjdWxhdGVkIjogZmFsc2UsICJ2YWx1ZXMiOiBb
XSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlfV0sICJvdmVycmlkZXMiOiBbXSwg
ImV4cG9ydF9kYXRlIjogMTU3MzQwOTE0MjQwOH0=
"""
    )