# -*- coding: utf-8 -*-

"""Generate the Resilient customizations required for fn_proofpoint_block_list"""

from __future__ import print_function
from resilient_circuits.util import *

def codegen_reload_data():
    """Parameters to codegen used to generate the fn_proofpoint_block_list package"""
    reload_params = {"package": u"fn_proofpoint_block_list",
                    "incident_fields": [], 
                    "action_fields": [], 
                    "function_params": [u"incident_id"], 
                    "datatables": [], 
                    "message_destinations": [u"proofpoint"], 
                    "functions": [u"proofpoint_add_to_block_group"], 
                    "phases": [], 
                    "automatic_tasks": [], 
                    "scripts": [], 
                    "workflows": [u"example_proofpoint_add_email_to_block_list"], 
                    "actions": [u"Example: Run Proofpoint Block List"] 
                    }
    return reload_params


def customization_data(client=None):
    """Produce any customization definitions (types, fields, message destinations, etc)
       that should be installed by `resilient-circuits customize`
    """

    # This import data contains:
    #   Function inputs:
    #     incident_id
    #   Message Destinations:
    #     proofpoint
    #   Functions:
    #     proofpoint_add_to_block_group
    #   Workflows:
    #     example_proofpoint_add_email_to_block_list
    #   Rules:
    #     Example: Run Proofpoint Block List


    yield ImportDefinition(u"""
eyJ0YXNrX29yZGVyIjogW10sICJ3b3JrZmxvd3MiOiBbeyJ1dWlkIjogIjBkMmIwOWNmLTBlNTgt
NDU4MC05YWY2LWM5ZWZhODNhNTJkNyIsICJkZXNjcmlwdGlvbiI6ICJUaGlzIGlzIGFuIGV4YW1w
bGUgd29ya2Zsb3cgdGhhdCBleGVjdXRlcyB0aGUgZnVuY3Rpb24gY2FsbGluZyB0aGUgUHJvb2ZQ
b2ludCBlbmRwb2ludCB0byBhZGQgdGhlIHNlbmRlciBlbWFpbCBhZGRyZXNzIHRvIHRoZSBibG9j
ayBsaXN0IG9mIHRoZSBhY2NvdW50IG9mIHRoZSBlbWFpbCByZWNpcGllbnQuIiwgIm9iamVjdF90
eXBlIjogImluY2lkZW50IiwgImV4cG9ydF9rZXkiOiAiZXhhbXBsZV9wcm9vZnBvaW50X2FkZF9l
bWFpbF90b19ibG9ja19saXN0IiwgIndvcmtmbG93X2lkIjogMTgwLCAibGFzdF9tb2RpZmllZF9i
eSI6ICJnZXJhbGQudHJvdG1hbkBpYm0uY29tIiwgImNvbnRlbnQiOiB7InhtbCI6ICI8P3htbCB2
ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz48ZGVmaW5pdGlvbnMgeG1sbnM9XCJo
dHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01PREVMXCIgeG1sbnM6YnBtbmRp
PVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9ESVwiIHhtbG5zOm9tZ2Rj
PVwiaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvRENcIiB4bWxuczpvbWdkaT1c
Imh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJXCIgeG1sbnM6cmVzaWxpZW50
PVwiaHR0cDovL3Jlc2lsaWVudC5pYm0uY29tL2JwbW5cIiB4bWxuczp4c2Q9XCJodHRwOi8vd3d3
LnczLm9yZy8yMDAxL1hNTFNjaGVtYVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgdGFyZ2V0TmFtZXNwYWNlPVwiaHR0cDovL3d3dy5jYW11
bmRhLm9yZy90ZXN0XCI+PHByb2Nlc3MgaWQ9XCJleGFtcGxlX3Byb29mcG9pbnRfYWRkX2VtYWls
X3RvX2Jsb2NrX2xpc3RcIiBpc0V4ZWN1dGFibGU9XCJ0cnVlXCIgbmFtZT1cIkV4YW1wbGU6IFBy
b29mcG9pbnQgQWRkIEVtYWlsIHRvIEJsb2NrIExpc3RcIj48ZG9jdW1lbnRhdGlvbj5UaGlzIGlz
IGFuIGV4YW1wbGUgd29ya2Zsb3cgdGhhdCBleGVjdXRlcyB0aGUgZnVuY3Rpb24gY2FsbGluZyB0
aGUgUHJvb2ZQb2ludCBlbmRwb2ludCB0byBhZGQgdGhlIHNlbmRlciBlbWFpbCBhZGRyZXNzIHRv
IHRoZSBibG9jayBsaXN0IG9mIHRoZSBhY2NvdW50IG9mIHRoZSBlbWFpbCByZWNpcGllbnQuPC9k
b2N1bWVudGF0aW9uPjxzdGFydEV2ZW50IGlkPVwiU3RhcnRFdmVudF8xNTVhc3htXCI+PG91dGdv
aW5nPlNlcXVlbmNlRmxvd18xN29rdGM4PC9vdXRnb2luZz48L3N0YXJ0RXZlbnQ+PHNlcnZpY2VU
YXNrIGlkPVwiU2VydmljZVRhc2tfMDE3ZjdwaVwiIG5hbWU9XCJQcm9vZnBvaW50IEFkZCBUbyBC
bG9jayBHcm91cFwiIHJlc2lsaWVudDp0eXBlPVwiZnVuY3Rpb25cIj48ZXh0ZW5zaW9uRWxlbWVu
dHM+PHJlc2lsaWVudDpmdW5jdGlvbiB1dWlkPVwiMmY2ZWNjNmQtMTRiMy00NWE2LTgwOTctMzJj
YTgyZmQ2NThiXCI+e1wiaW5wdXRzXCI6e30sXCJwcmVfcHJvY2Vzc2luZ19zY3JpcHRcIjpcImlu
cHV0cy5pbmNpZGVudF9pZCA9IGluY2lkZW50LmlkXCIsXCJyZXN1bHRfbmFtZVwiOlwiXCJ9PC9y
ZXNpbGllbnQ6ZnVuY3Rpb24+PC9leHRlbnNpb25FbGVtZW50cz48aW5jb21pbmc+U2VxdWVuY2VG
bG93XzE3b2t0Yzg8L2luY29taW5nPjxvdXRnb2luZz5TZXF1ZW5jZUZsb3dfMWJqOG8zMzwvb3V0
Z29pbmc+PC9zZXJ2aWNlVGFzaz48c2VxdWVuY2VGbG93IGlkPVwiU2VxdWVuY2VGbG93XzE3b2t0
YzhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJTZXJ2aWNl
VGFza18wMTdmN3BpXCIvPjxlbmRFdmVudCBpZD1cIkVuZEV2ZW50XzB4cTJvYTlcIj48aW5jb21p
bmc+U2VxdWVuY2VGbG93XzFiajhvMzM8L2luY29taW5nPjwvZW5kRXZlbnQ+PHNlcXVlbmNlRmxv
dyBpZD1cIlNlcXVlbmNlRmxvd18xYmo4bzMzXCIgc291cmNlUmVmPVwiU2VydmljZVRhc2tfMDE3
ZjdwaVwiIHRhcmdldFJlZj1cIkVuZEV2ZW50XzB4cTJvYTlcIi8+PHRleHRBbm5vdGF0aW9uIGlk
PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiPjx0ZXh0PlN0YXJ0IHlvdXIgd29ya2Zsb3cgaGVy
ZTwvdGV4dD48L3RleHRBbm5vdGF0aW9uPjxhc3NvY2lhdGlvbiBpZD1cIkFzc29jaWF0aW9uXzFz
ZXVqNDhcIiBzb3VyY2VSZWY9XCJTdGFydEV2ZW50XzE1NWFzeG1cIiB0YXJnZXRSZWY9XCJUZXh0
QW5ub3RhdGlvbl8xa3h4aXl0XCIvPjwvcHJvY2Vzcz48YnBtbmRpOkJQTU5EaWFncmFtIGlkPVwi
QlBNTkRpYWdyYW1fMVwiPjxicG1uZGk6QlBNTlBsYW5lIGJwbW5FbGVtZW50PVwidW5kZWZpbmVk
XCIgaWQ9XCJCUE1OUGxhbmVfMVwiPjxicG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU3Rh
cnRFdmVudF8xNTVhc3htXCIgaWQ9XCJTdGFydEV2ZW50XzE1NWFzeG1fZGlcIj48b21nZGM6Qm91
bmRzIGhlaWdodD1cIjM2XCIgd2lkdGg9XCIzNlwiIHg9XCIxNjJcIiB5PVwiMTg4XCIvPjxicG1u
ZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiOTBcIiB4PVwi
MTU3XCIgeT1cIjIyM1wiLz48L2JwbW5kaTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dFwiIGlk
PVwiVGV4dEFubm90YXRpb25fMWt4eGl5dF9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMzBc
IiB3aWR0aD1cIjEwMFwiIHg9XCI5OVwiIHk9XCIyNTRcIi8+PC9icG1uZGk6QlBNTlNoYXBlPjxi
cG1uZGk6QlBNTkVkZ2UgYnBtbkVsZW1lbnQ9XCJBc3NvY2lhdGlvbl8xc2V1ajQ4XCIgaWQ9XCJB
c3NvY2lhdGlvbl8xc2V1ajQ4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxNjlcIiB4c2k6dHlw
ZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIyMFwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjE1M1wiIHhz
aTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjU0XCIvPjwvYnBtbmRpOkJQTU5FZGdlPjxicG1u
ZGk6QlBNTlNoYXBlIGJwbW5FbGVtZW50PVwiU2VydmljZVRhc2tfMDE3ZjdwaVwiIGlkPVwiU2Vy
dmljZVRhc2tfMDE3ZjdwaV9kaVwiPjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiODBcIiB3aWR0aD1c
IjEwMFwiIHg9XCIzOTRcIiB5PVwiMTY2XCIvPjwvYnBtbmRpOkJQTU5TaGFwZT48YnBtbmRpOkJQ
TU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzE3b2t0YzhcIiBpZD1cIlNlcXVlbmNl
Rmxvd18xN29rdGM4X2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCIxOThcIiB4c2k6dHlwZT1cIm9t
Z2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjM5NFwiIHhzaTp0eXBl
PVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVsPjxvbWdkYzpCb3Vu
ZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiMjk2XCIgeT1cIjE4NFwiLz48L2JwbW5k
aTpCUE1OTGFiZWw+PC9icG1uZGk6QlBNTkVkZ2U+PGJwbW5kaTpCUE1OU2hhcGUgYnBtbkVsZW1l
bnQ9XCJFbmRFdmVudF8weHEyb2E5XCIgaWQ9XCJFbmRFdmVudF8weHEyb2E5X2RpXCI+PG9tZ2Rj
OkJvdW5kcyBoZWlnaHQ9XCIzNlwiIHdpZHRoPVwiMzZcIiB4PVwiNjg5XCIgeT1cIjE4OFwiLz48
YnBtbmRpOkJQTU5MYWJlbD48b21nZGM6Qm91bmRzIGhlaWdodD1cIjEzXCIgd2lkdGg9XCIwXCIg
eD1cIjcwN1wiIHk9XCIyMjdcIi8+PC9icG1uZGk6QlBNTkxhYmVsPjwvYnBtbmRpOkJQTU5TaGFw
ZT48YnBtbmRpOkJQTU5FZGdlIGJwbW5FbGVtZW50PVwiU2VxdWVuY2VGbG93XzFiajhvMzNcIiBp
ZD1cIlNlcXVlbmNlRmxvd18xYmo4bzMzX2RpXCI+PG9tZ2RpOndheXBvaW50IHg9XCI0OTRcIiB4
c2k6dHlwZT1cIm9tZ2RjOlBvaW50XCIgeT1cIjIwNlwiLz48b21nZGk6d2F5cG9pbnQgeD1cIjY4
OVwiIHhzaTp0eXBlPVwib21nZGM6UG9pbnRcIiB5PVwiMjA2XCIvPjxicG1uZGk6QlBNTkxhYmVs
PjxvbWdkYzpCb3VuZHMgaGVpZ2h0PVwiMTNcIiB3aWR0aD1cIjBcIiB4PVwiNTkxLjVcIiB5PVwi
MTg0XCIvPjwvYnBtbmRpOkJQTU5MYWJlbD48L2JwbW5kaTpCUE1ORWRnZT48L2JwbW5kaTpCUE1O
UGxhbmU+PC9icG1uZGk6QlBNTkRpYWdyYW0+PC9kZWZpbml0aW9ucz4iLCAid29ya2Zsb3dfaWQi
OiAiZXhhbXBsZV9wcm9vZnBvaW50X2FkZF9lbWFpbF90b19ibG9ja19saXN0IiwgInZlcnNpb24i
OiAxfSwgImxhc3RfbW9kaWZpZWRfdGltZSI6IDE1NTc5MzU3OTU1MjksICJjcmVhdG9yX2lkIjog
ImdlcmFsZC50cm90bWFuQGlibS5jb20iLCAiYWN0aW9ucyI6IFtdLCAicHJvZ3JhbW1hdGljX25h
bWUiOiAiZXhhbXBsZV9wcm9vZnBvaW50X2FkZF9lbWFpbF90b19ibG9ja19saXN0IiwgIm5hbWUi
OiAiRXhhbXBsZTogUHJvb2Zwb2ludCBBZGQgRW1haWwgdG8gQmxvY2sgTGlzdCJ9XSwgImFjdGlv
bnMiOiBbeyJsb2dpY190eXBlIjogImFsbCIsICJuYW1lIjogIkV4YW1wbGU6IFJ1biBQcm9vZnBv
aW50IEJsb2NrIExpc3QiLCAidmlld19pdGVtcyI6IFtdLCAidHlwZSI6IDEsICJ3b3JrZmxvd3Mi
OiBbImV4YW1wbGVfcHJvb2Zwb2ludF9hZGRfZW1haWxfdG9fYmxvY2tfbGlzdCJdLCAib2JqZWN0
X3R5cGUiOiAiaW5jaWRlbnQiLCAidGltZW91dF9zZWNvbmRzIjogODY0MDAsICJ1dWlkIjogImUx
OTljZjViLTY3ZGItNGYyYS04NTFlLWQ3YTYzNTE0MDQ2ZiIsICJhdXRvbWF0aW9ucyI6IFtdLCAi
ZXhwb3J0X2tleSI6ICJFeGFtcGxlOiBSdW4gUHJvb2Zwb2ludCBCbG9jayBMaXN0IiwgImNvbmRp
dGlvbnMiOiBbXSwgImlkIjogMTk1LCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbXX1dLCAibGF5
b3V0cyI6IFtdLCAiZXhwb3J0X2Zvcm1hdF92ZXJzaW9uIjogMiwgImlkIjogODEsICJpbmR1c3Ry
aWVzIjogbnVsbCwgInBoYXNlcyI6IFtdLCAiYWN0aW9uX29yZGVyIjogW10sICJnZW9zIjogbnVs
bCwgImxvY2FsZSI6IG51bGwsICJzZXJ2ZXJfdmVyc2lvbiI6IHsibWFqb3IiOiAzMiwgInZlcnNp
b24iOiAiMzIuMC40NTAyIiwgImJ1aWxkX251bWJlciI6IDQ1MDIsICJtaW5vciI6IDB9LCAidGlt
ZWZyYW1lcyI6IG51bGwsICJ3b3Jrc3BhY2VzIjogW10sICJhdXRvbWF0aWNfdGFza3MiOiBbXSwg
ImZ1bmN0aW9ucyI6IFt7ImRpc3BsYXlfbmFtZSI6ICJQcm9vZnBvaW50IEFkZCBUbyBCbG9jayBH
cm91cCIsICJkZXNjcmlwdGlvbiI6IHsiY29udGVudCI6ICJUaGlzIGZ1bmN0aW9uIHJ1bnMgb24g
dGhlIGluY2lkZW50IGFuZCBleHRyYWN0cyBhcnRpZmFjdHMgb2YgdHlwZSBFbWFpbCBTZW5kZXIg
YW5kIEVtYWlsIFJlY2VpdmVyIHBhc3NpbmcgdGhlIHNlbmRlciBlbWFpbCBhZGRyZXNzIGludG8g
dGhlIGJsb2NrIGxpc3Qgb2YgdGhlIGVtYWlsIHJlY2VpdmVycyBhZGRyZXNzLiIsICJmb3JtYXQi
OiAidGV4dCJ9LCAiY3JlYXRvciI6IHsiZGlzcGxheV9uYW1lIjogIkdlcmFsZCBUcm90bWFuIiwg
InR5cGUiOiAidXNlciIsICJpZCI6IDQsICJuYW1lIjogImdlcmFsZC50cm90bWFuQGlibS5jb20i
fSwgInZpZXdfaXRlbXMiOiBbeyJzaG93X2lmIjogbnVsbCwgImZpZWxkX3R5cGUiOiAiX19mdW5j
dGlvbiIsICJzaG93X2xpbmtfaGVhZGVyIjogZmFsc2UsICJlbGVtZW50IjogImZpZWxkX3V1aWQi
LCAiY29udGVudCI6ICJlYWQyMTRjMi0xM2ZlLTQzZjYtYTNjNy02NzZhODgzMzhkYmIiLCAic3Rl
cF9sYWJlbCI6IG51bGx9XSwgImV4cG9ydF9rZXkiOiAicHJvb2Zwb2ludF9hZGRfdG9fYmxvY2tf
Z3JvdXAiLCAidXVpZCI6ICIyZjZlY2M2ZC0xNGIzLTQ1YTYtODA5Ny0zMmNhODJmZDY1OGIiLCAi
bGFzdF9tb2RpZmllZF9ieSI6IHsiZGlzcGxheV9uYW1lIjogIkdlcmFsZCBUcm90bWFuIiwgInR5
cGUiOiAidXNlciIsICJpZCI6IDQsICJuYW1lIjogImdlcmFsZC50cm90bWFuQGlibS5jb20ifSwg
InZlcnNpb24iOiAzLCAid29ya2Zsb3dzIjogW3siZGVzY3JpcHRpb24iOiBudWxsLCAib2JqZWN0
X3R5cGUiOiAiaW5jaWRlbnQiLCAiYWN0aW9ucyI6IFtdLCAibmFtZSI6ICJFeGFtcGxlOiBQcm9v
ZnBvaW50IEFkZCBFbWFpbCB0byBCbG9jayBMaXN0IiwgIndvcmtmbG93X2lkIjogMTgwLCAicHJv
Z3JhbW1hdGljX25hbWUiOiAiZXhhbXBsZV9wcm9vZnBvaW50X2FkZF9lbWFpbF90b19ibG9ja19s
aXN0IiwgInV1aWQiOiBudWxsfV0sICJsYXN0X21vZGlmaWVkX3RpbWUiOiAxNTU3OTM0MzM2OTM3
LCAiZGVzdGluYXRpb25faGFuZGxlIjogInByb29mcG9pbnQiLCAiaWQiOiAxOTQsICJuYW1lIjog
InByb29mcG9pbnRfYWRkX3RvX2Jsb2NrX2dyb3VwIn1dLCAibm90aWZpY2F0aW9ucyI6IG51bGws
ICJyZWd1bGF0b3JzIjogbnVsbCwgImluY2lkZW50X3R5cGVzIjogW3siY3JlYXRlX2RhdGUiOiAx
NTU3OTY1ODkzMDA3LCAiZGVzY3JpcHRpb24iOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50
ZXJuYWwpIiwgImV4cG9ydF9rZXkiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwp
IiwgImlkIjogMCwgIm5hbWUiOiAiQ3VzdG9taXphdGlvbiBQYWNrYWdlcyAoaW50ZXJuYWwpIiwg
InVwZGF0ZV9kYXRlIjogMTU1Nzk2NTg5MzAwNywgInV1aWQiOiAiYmZlZWMyZDQtMzc3MC0xMWU4
LWFkMzktNGEwMDA0MDQ0YWEwIiwgImVuYWJsZWQiOiBmYWxzZSwgInN5c3RlbSI6IGZhbHNlLCAi
cGFyZW50X2lkIjogbnVsbCwgImhpZGRlbiI6IGZhbHNlfV0sICJzY3JpcHRzIjogW10sICJ0eXBl
cyI6IFtdLCAibWVzc2FnZV9kZXN0aW5hdGlvbnMiOiBbeyJ1dWlkIjogImZmNzM3NjA0LWMxMDgt
NDEzMS04YWM4LTIwMzRmODc5NDZmMyIsICJleHBvcnRfa2V5IjogInByb29mcG9pbnQiLCAibmFt
ZSI6ICJQcm9vZnBvaW50IiwgImRlc3RpbmF0aW9uX3R5cGUiOiAwLCAicHJvZ3JhbW1hdGljX25h
bWUiOiAicHJvb2Zwb2ludCIsICJleHBlY3RfYWNrIjogdHJ1ZSwgInVzZXJzIjogW119XSwgImlu
Y2lkZW50X2FydGlmYWN0X3R5cGVzIjogW10sICJyb2xlcyI6IFtdLCAiZmllbGRzIjogW3sib3Bl
cmF0aW9ucyI6IFtdLCAidHlwZV9pZCI6IDAsICJvcGVyYXRpb25fcGVybXMiOiB7fSwgInRleHQi
OiAiU2ltdWxhdGlvbiIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51bGwsICJj
aGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMzcsICJyZWFkX29ubHkiOiB0cnVlLCAidXVpZCI6ICJj
M2YwZTNlZC0yMWUxLTRkNTMtYWZmYi1mZTVjYTMzMDhjY2EiLCAiY2hvc2VuIjogZmFsc2UsICJp
bnB1dF90eXBlIjogImJvb2xlYW4iLCAidG9vbHRpcCI6ICJXaGV0aGVyIHRoZSBpbmNpZGVudCBp
cyBhIHNpbXVsYXRpb24gb3IgYSByZWd1bGFyIGluY2lkZW50LiAgVGhpcyBmaWVsZCBpcyByZWFk
LW9ubHkuIiwgImludGVybmFsIjogZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRl
cyI6IFtdLCAiZXhwb3J0X2tleSI6ICJpbmNpZGVudC9pbmNfdHJhaW5pbmciLCAiaGlkZV9ub3Rp
ZmljYXRpb24iOiBmYWxzZSwgIm5hbWUiOiAiaW5jX3RyYWluaW5nIiwgImRlcHJlY2F0ZWQiOiBm
YWxzZSwgImRlZmF1bHRfY2hvc2VuX2J5X3NlcnZlciI6IGZhbHNlLCAidmFsdWVzIjogW119LCB7
Im9wZXJhdGlvbnMiOiBbXSwgInR5cGVfaWQiOiAxMSwgIm9wZXJhdGlvbl9wZXJtcyI6IHt9LCAi
dGV4dCI6ICJpbmNpZGVudF9pZCIsICJibGFua19vcHRpb24iOiBmYWxzZSwgInByZWZpeCI6IG51
bGwsICJjaGFuZ2VhYmxlIjogdHJ1ZSwgImlkIjogMTE1LCAicmVhZF9vbmx5IjogZmFsc2UsICJ1
dWlkIjogImVhZDIxNGMyLTEzZmUtNDNmNi1hM2M3LTY3NmE4ODMzOGRiYiIsICJjaG9zZW4iOiBm
YWxzZSwgImlucHV0X3R5cGUiOiAibnVtYmVyIiwgInRvb2x0aXAiOiAiIiwgImludGVybmFsIjog
ZmFsc2UsICJyaWNoX3RleHQiOiBmYWxzZSwgInRlbXBsYXRlcyI6IFtdLCAiZXhwb3J0X2tleSI6
ICJfX2Z1bmN0aW9uL2luY2lkZW50X2lkIiwgImhpZGVfbm90aWZpY2F0aW9uIjogZmFsc2UsICJw
bGFjZWhvbGRlciI6ICIiLCAibmFtZSI6ICJpbmNpZGVudF9pZCIsICJkZXByZWNhdGVkIjogZmFs
c2UsICJkZWZhdWx0X2Nob3Nlbl9ieV9zZXJ2ZXIiOiBmYWxzZSwgInZhbHVlcyI6IFtdfV0sICJv
dmVycmlkZXMiOiBbXSwgImV4cG9ydF9kYXRlIjogMTU1NzkzNjQ0NTg4NX0=
"""
    )